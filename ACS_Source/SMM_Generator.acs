#define MAXMONSTERS_DOOM 25
#define MAXMONSTERS_CHEX 13
#define MAXMONSTERS_HERETIC 15

int generatorCountersDoom[MAXMONSTERS_DOOM];
str SpawnersDoom[MAXMONSTERS_DOOM] = { "ZombiemanSpawner", "ShotGunGuySpawner", "DoomImpSpawner", "ChainGunGuySpawner", "SuperShotgunGuySpawner", "DemonSpawner", "DarkImpSpawner", "SpectreSpawner", "BloodDemonSpawner", "LostSoulSpawner", "CacodemonSpawner", "RevenantSpawner", "CacolanternSpawner", "PainElementalSpawner", "HellKnightSpawner", "ArachnotronSpawner", "FatsoSpawner", "AbaddonSpawner", "ArchvileSpawner", "BaronofHellSpawner", "HectebusSpawner", "BelphegorSpawner", "SpiderMastermindSpawner", "CyberDemonSpawner", "WolfensteinSSSpawner" };

int generatorCountersChex[MAXMONSTERS_CHEX];
str SpawnersChex[MAXMONSTERS_CHEX] = { "FlemoidusCommonusSpawner", "FlemoidusBipedicusSpawner", "ArmoredFlemoidusBipedicusSpawner", "FlemoidusStridicusSpawner", "LarvaSpawner", "FlemMineSpawner", "FlemoidusCycloptisCommonusSpawner", "SuperCycloptisSpawner", "QuadrumpusSpawner", "FlemoidusMaximusSpawner", "FlembraneSpawner", "SnotfolusSpawner", "FlembominationSpawner" };

int generatorCountersHeretic[MAXMONSTERS_HERETIC];
str SpawnersHeretic[MAXMONSTERS_HERETIC] = { "HereticImpReplacer", "HereticImpLeaderReplacer", "MummyReplacer", "MummyGhostReplacer", "MummyLeaderReplacer", "MummyLeaderGhostReplacer", "WizardReplacer", "KnightReplacer", "KnightGhostReplacer", "ClinkReplacer", "SnakeReplacer", "BeastReplacer", "IronlichReplacer", "MinotaurReplacer", "Sorcerer1Replacer" };

int totalTypes = 0;
int generationAmount = 0;
int DoomSecretLevel = 0;
int minSelector = 32;
int maxSelector = 0;
int selectorBias = 0;

Script "DetermineValidSpawnReMixer" Open
{
	if(GetCvar("mm_generate") <= 0)
		terminate;
		
	until(GetCvar("samsara_processedgame")) { Delay(1); }
	
	ACS_NamedExecuteWithResult("SMMGenerator_DetermineGameChoice");
	
	for(int a = 512; a <= 0.5; a+=1024)
	{
		for(int b = 512; b <= 0.5; b+=1024)
		{
			if(GetCVar("samsara_zscriptready") == 1)
				SpawnForced("DetermineValidCellReMixerZS",a*1.0,b*1.0,0,0);
			else
				SpawnForced("DetermineValidCellReMixer",a*1.0,b*1.0,0,0);
			if(b > 0)
				b = -b - 1024;
			else
				b = -b;			
		}
		if(a > 0)
			a = -a - 1024;
		else
			a = -a;	
	}	
}

Script "SMMGenerator_DetermineGameChoice" (void)
{
	int game = GetCvar("samsara_currentgame");
	int selector, counters, diff;
	switch(game)
	{
		case 1:
			for(counters = 0; counters < MAXMONSTERS_DOOM; counters++)
			{
				generatorCountersDoom[counters] = ThingCountName(SpawnersDoom[counters],0);
			}
			
			if(generatorCountersDoom[24] > 0)
				DoomSecretLevel = 1;

			for(selector = 0; selector < MAXMONSTERS_DOOM; selector++)
			{
				if(generatorCountersDoom[selector] > 0)
				{
					if(selector < minSelector && selector < 22)
						minSelector = selector;
					if(selector > maxSelector && selector < 22)
						maxSelector = selector;
				}
				totalTypes += generatorCountersDoom[selector];	
				generationAmount += generatorCountersDoom[selector]*(selector+1);
			}
				
			selectorBias = FixedDiv(generationAmount*1.0,totalTypes*1.0) - 1.0;
			for(diff = 5; diff > GameSkill()+1; diff--)
			{
				selectorBias = FixedMul(selectorBias,0.8);
			}
			break;
		case 2:
			for(counters = 0; counters < MAXMONSTERS_CHEX; counters++)
			{
				generatorCountersChex[counters] = ThingCountName(SpawnersChex[counters],0);
			}

			for(selector = 0; selector < MAXMONSTERS_CHEX; selector++)
			{
				if(generatorCountersChex[selector] > 0)
				{
					if(selector < minSelector && selector < 22)
						minSelector = selector;
					if(selector > maxSelector && selector < 22)
						maxSelector = selector;
				}
				totalTypes += generatorCountersChex[selector];	
				generationAmount += generatorCountersChex[selector]*(selector+1);
			}
				
			selectorBias = FixedDiv(generationAmount*1.0,totalTypes*1.0) - 1.0;
			for(diff = 5; diff > GameSkill()+1; diff--)
			{
				selectorBias = FixedMul(selectorBias,0.8);
			}
			break;
		case 4:
			for(counters = 0; counters < MAXMONSTERS_HERETIC; counters++)
			{
				generatorCountersHeretic[counters] = ThingCountName(SpawnersHeretic[counters],0);
			}

			for(selector = 0; selector < MAXMONSTERS_HERETIC; selector++)
			{
				if(generatorCountersHeretic[selector] > 0)
				{
					if(selector < minSelector && selector < 22)
						minSelector = selector;
					if(selector > maxSelector && selector < 22)
						maxSelector = selector;
				}
				totalTypes += generatorCountersHeretic[selector];	
				generationAmount += generatorCountersHeretic[selector]*(selector+1);
			}
				
			selectorBias = FixedDiv(generationAmount*1.0,totalTypes*1.0) - 1.0;
			for(diff = 5; diff > GameSkill()+1; diff--)
			{
				selectorBias = FixedMul(selectorBias,0.8);
			}
			break;
	}
}

script "CellDoneScanningReMixer" (void)
{
	int newtid = UniqueTid();
	for(int a = -512; a < 512; a+=64)
	{
		for(int b = -512; b < 512; b+=64)
		{
			if(random(1,15000 + (2500 * (4 - GameSkill()))) <= (GetCvar("mm_generate")*GetCvar("mm_generate")))
			{	
				SpawnForced("DetermineValidSpawnTestObject",GetActorX(0)+(a*1.0),GetActorY(0)+(b*1.0),0,newtid);
				if(GetCVar("samsara_zscriptready") == 1)
					Spawn("DetermineValidSpawnReMixerZS",GetActorX(0)+(a*1.0),GetActorY(0)+(b*1.0),GetActorFloorZ(newtid),0);
				else
					Spawn("DetermineValidSpawnReMixer",GetActorX(0)+(a*1.0),GetActorY(0)+(b*1.0),GetActorFloorZ(newtid),0);
			}
		}
	}
}

Script "SMMGeneratorSelector" (void)
{
	if(generationAmount <= 0)
		terminate;
		
	int game = GetCvar("samsara_currentgame");
		
	Delay(1);
	int newTid = UniqueTid();
	int influence = 1.0;
	int pickMonster = 0;
	int selectionAttempts = 0;
	int maxSelectionAttempts = 8;
	
	int actorX = GetActorX(0)/1.0;
	int actorY = GetActorY(0)/1.0;
	
	int floor1 = GetSectorFloorZ(0,actorX-32,actorY);
	int floor2 = GetSectorFloorZ(0,actorX+32,actorY);
	int floor3 = GetSectorFloorZ(0,actorX,actorY-32);
	int floor4 = GetSectorFloorZ(0,actorX,actorY+32);
	
	if(floor1 != floor2 || floor1 != floor3 || floor1 != floor4)
		terminate;
		
	int rnd, mix;
	
	switch(game)
	{
		case 1:	
			pickMonster = DoomSecretLevel ? 24 : 22; 
			while((pickMonster == 22 || pickMonster == 23) && selectionAttempts < maxSelectionAttempts)
			{
				rnd = random(0.0,1.0) * (maxSelector - minSelector) + minSelector;
				mix = FixedMul(random(0.0,1.0),influence);
				pickMonster = roundZandronum(FixedMul(rnd,(1.0 - mix)) + (selectorBias * minSelector));
				selectionAttempts++;
			}
			if(selectionAttempts >= maxSelectionAttempts)
				terminate;
				
			SpawnForced(strparam(s:SpawnersDoom[pickMonster],s:"Generator"),GetActorX(0),GetActorY(0),GetActorZ(0),newTid); break;
			break;
		case 2:	
			pickMonster = 12; 
			while((pickMonster == 12 || pickMonster == 13) && selectionAttempts < maxSelectionAttempts)
			{
				rnd = random(0.0,1.0) * (maxSelector - minSelector) + minSelector;
				mix = FixedMul(random(0.0,1.0),influence);
				pickMonster = roundZandronum(FixedMul(rnd,(1.0 - mix)) + (selectorBias * minSelector));
				selectionAttempts++;
			}
			if(selectionAttempts >= maxSelectionAttempts)
				terminate;
				
			SpawnForced(strparam(s:SpawnersChex[pickMonster],s:"Generator"),GetActorX(0),GetActorY(0),GetActorZ(0),newTid); break;
			break;
		case 4:	
			pickMonster = 13; 
			while((pickMonster == 13 || pickMonster == 14) && selectionAttempts < maxSelectionAttempts)
			{
				rnd = random(0.0,1.0) * (maxSelector - minSelector) + minSelector;
				mix = FixedMul(random(0.0,1.0),influence);
				pickMonster = roundZandronum(FixedMul(rnd,(1.0 - mix)) + (selectorBias * minSelector));
				selectionAttempts++;
			}
			if(selectionAttempts >= maxSelectionAttempts)
				terminate;
				
			SpawnForced(strparam(s:SpawnersHeretic[pickMonster],s:"Generator"),GetActorX(0),GetActorY(0),GetActorZ(0),newTid); break;
			break;
	}
	
	SetActorAngle(newTid,0.125*random(0,8));
	Thing_ChangeTid(newTid,0);
}