#define MAXMONSTERS_DOOM 25
#define MAXMONSTERS_CHEX 13
#define MAXMONSTERS_CHEXORIGINAL 5
#define MAXMONSTERS_HERETIC 15
#define MAXMONSTERS_HEXEN 17
#define MAXMONSTERS_STRIFE 6
#define MAXMONSTERS_HACX 15
#define MAXMONSTERS_HARMONY 9
#define MAXMONSTERS_ROTWB 19
#define MAXMONSTERS_REKKR 18

int generatorCountersDoom[MAXMONSTERS_DOOM];
str SpawnersDoom[MAXMONSTERS_DOOM] = { "ZombiemanSpawner", "ShotGunGuySpawner", "DoomImpSpawner", "WolfensteinSSSpawner", "ChainGunGuySpawner", "DemonSpawner", "SpectreSpawner", "LostSoulSpawner", "DarkImpSpawner", "SuperShotgunGuySpawner", "BloodDemonSpawner", "CacodemonSpawner", "RevenantSpawner", "HellKnightSpawner", "CacolanternSpawner", "PainElementalSpawner", "ArachnotronSpawner", "FatsoSpawner", "BaronofHellSpawner", "ArchvileSpawner", "AbaddonSpawner", "HectebusSpawner", "BelphegorSpawner", "SpiderMastermindSpawner", "CyberDemonSpawner" };

int generatorCountersChex[MAXMONSTERS_CHEX];
str SpawnersChex[MAXMONSTERS_CHEX] = { "FlemoidusCommonusSpawner", "FlemoidusBipedicusSpawner", "ArmoredFlemoidusBipedicusSpawner", "FlemoidusCycloptisCommonusSpawner", "LarvaSpawner", "FlemMineSpawner", "FlemoidusStridicusSpawner", "SuperCycloptisSpawner", "QuadrumpusSpawner", "FlemoidusMaximusSpawner", "FlembraneSpawner", "FlembominationSpawner", "SnotfolusSpawner" };

int generatorCountersChexOriginal[MAXMONSTERS_CHEXORIGINAL];
str SpawnersChexOriginal[MAXMONSTERS_CHEXORIGINAL] = { "FlemoidusCommonusSpawner_CQ1", "FlemoidusBipedicusSpawner_CQ1", "ArmoredFlemoidusBipedicusSpawner_CQ1", "FlemoidusCycloptisCommonusSpawner_CQ1", "FlembraneSpawner_CQ1" };

int generatorCountersHeretic[MAXMONSTERS_HERETIC];
str SpawnersHeretic[MAXMONSTERS_HERETIC] = { "HereticImpReplacer", "MummyReplacer", "HereticImpLeaderReplacer", "MummyGhostReplacer", "MummyLeaderReplacer", "MummyLeaderGhostReplacer", "KnightReplacer", "ClinkReplacer", "WizardReplacer", "KnightGhostReplacer", "BeastReplacer", "SnakeReplacer", "IronlichReplacer", "MinotaurReplacer", "Sorcerer1Replacer" };

int generatorCountersHexen[MAXMONSTERS_HEXEN];
str SpawnersHexen[MAXMONSTERS_HEXEN] = { "EttinReplacer", "FireDemonReplacer", "CentaurReplacer", "Demon1Replacer", "Demon2Replacer", "SerpentReplacer", "SerpentLeaderReplacer", "BishopReplacer", "IceGuyReplacer", "WraithReplacer", "CentaurLeaderReplacer", "FighterBossReplacer", "MageBossReplacer", "ClericBossReplacer", "HeresiarchReplacer", "KoraxReplacer" };

int generatorCountersStrife[MAXMONSTERS_STRIFE];
str SpawnersStrife[MAXMONSTERS_STRIFE] = { "StrifeStalkerReplacer", "StrifeSentinelReplacer", "StrifeReaverReplacer", "StrifeTemplarReplacer", "StrifeCrusaderReplacer", "StrifeInquisitorReplacer" };

int generatorCountersHacx[MAXMONSTERS_HACX];
str SpawnersHacx[MAXMONSTERS_HACX] = { "HacxThug_SamsaraRemixer", "HacxAndroid_SamsaraRemixer", "HacxPhage_SamsaraRemixer", "HacxBuzzer_SamsaraRemixer", "HacxStealth_SamsaraRemixer", "HacxICE_SamsaraRemixer", "HacxMonstruct_SamsaraRemixer", "HacxDMan_SamsaraRemixer", "HacxMajong7_SamsaraRemixer", "HacxTerminatrix_SamsaraRemixer", "HacxMechaManiac_SamsaraRemixer", "HacxThornThing_SamsaraRemixer", "HacxMummy_SamsaraRemixer", "HacxSkeleton_SamsaraRemixer", "HacxRoamingMine_SamsaraRemixer" };

int generatorCountersHarmony[MAXMONSTERS_HARMONY];
str SpawnersHarmony[MAXMONSTERS_HARMONY] = { "Beastling_SamsaraRemixer", "FallingFollower_SamsaraRemixer", "Follower_SamsaraRemixer", "WalkingCentaur_SamsaraRemixer", "Soldier_SamsaraRemixer", "WalkingPhage_SamsaraRemixer", "Critter_SamsaraRemixer", "WalkingPredator_SamsaraRemixer", "Echida_SamsaraRemixer" };

int generatorCountersROTWB[MAXMONSTERS_ROTWB];
str SpawnersROTWB[MAXMONSTERS_ROTWB] = { "ShotgunCat_SamsaraRemixer", "WizardCat_SamsaraRemixer", "DemonCat_SamsaraRemixer", "WizardCatBlack_SamsaraRemixer", "ChaingunCat_SamsaraRemixer", "PsychoCat_SamsaraRemixer", "ShotgunCatFloat_SamsaraRemixer", "KamikaziGuy_SamsaraRemixer", "Spidercat_SamsaraRemixer", "ChaingunCatBig_SamsaraRemixer", "OfficerCat_SamsaraRemixer", "FlyingKitty_SamsaraRemixer", "ChaingunCatBigCurl_SamsaraRemixer", "RoboCat_SamsaraRemixer", "DemonFish_SamsaraRemixer", "ShotgunCatPirate_SamsaraRemixer", "ChaingunCatBigPirate_SamsaraRemixer", "LowResHedgehog_SamsaraRemixer", "LowResChaingunCat_SamsaraRemixer" };

int generatorCountersREKKR[MAXMONSTERS_REKKR];
str SpawnersREKKR[MAXMONSTERS_REKKR] = { "REKKRFormerHuman_SamsaraRemixer", "REKKRGrotesque_SamsaraRemixer", "REKKRHusk_SamsaraRemixer", "REKKRImp_SamsaraRemixer", "REKKREyeball_SamsaraRemixer", "REKKRMeanHusk_SamsaraRemixer", "REKKRMeanImp_SamsaraRemixer", "REKKRSorrow_SamsaraRemixer", "REKKRRunePorter_SamsaraRemixer", "REKKRSkelespider_SamsaraRemixer", "RERRKFormerDuke_SamsaraRemixer", "REKKRSkellyBelly_SamsaraRemixer", "REKKRTreebeast_SamsaraRemixer", "REKKRFlammenwerfer_SamsaraRemixer", "REKKRFormerKing_SamsaraRemixer", "REKKRFormerKing2_SamsaraRemixer", "REKKRDeathRaven_SamsaraRemixer", "REKKRGardien_SamsaraRemixer" };

bool spawnSecretMonsters = false;

int totalTypes = 0;
int generationAmount = 0;
int minSelector = 32;
int maxSelector = 0;
int selectorBias = 0;
int processedCounts = 0;

Script "DetermineValidSpawnReMixer" Open
{
	if(GetCVar("mm_generate") <= 0 && GetCVar("mm_reducemonsters") >= 99)
		terminate;

	until(GetCVar("samsara_processedgame")) { Delay(1); }

	ACS_NamedExecuteWithResult("SMMGenerator_DetermineGameChoice");
	processedCounts = 1;

	for(int a = 512; a <= 0.5; a+=1024)
	{
		for(int b = 512; b <= 0.5; b+=1024)
		{
			if(GetCVar("samsara_zscriptready") >= 1)
				SpawnForced("DetermineValidCellReMixerZS",a*1.0,b*1.0,0,0);
			else
				SpawnForced("DetermineValidCellReMixer",a*1.0,b*1.0,0,0);
			if(b > 0)
				b = -b - 1024;
			else
				b = -b;
		}
		if(a > 0)
			a = -a - 1024;
		else
			a = -a;
	}
}

Script "SMMGenerator_DetermineGameChoice" (void)
{
	int game = GetCVar("samsara_currentgame");
	int selector, counters, diff, currentCounterForSelector;
	switch(game)
	{
		case 1:
			for(counters = 0; counters < MAXMONSTERS_DOOM; counters++)
			{
				generatorCountersDoom[counters] = ThingCountName(SpawnersDoom[counters],0);
			}

			spawnSecretMonsters = generatorCountersDoom[3] > 0;

			for(selector = 0; selector < MAXMONSTERS_DOOM; selector++)
			{
				currentCounterForSelector = generatorCountersDoom[selector];

				if(currentCounterForSelector > 0)
				{
					if(selector < minSelector)
						minSelector = selector;
					if(selector > maxSelector)
						maxSelector = selector;
				}
				totalTypes += currentCounterForSelector;
				generationAmount += currentCounterForSelector*(selector+1);
			}
			break;

		case 2:
			// Check if we're playing Chex Quest 3 or Chex Quest 1
			int CQ1CheckTid = UniqueTid();

			if(!SpawnForced("FlemoidusCommonus2_CQ1",0,0,0,CQ1CheckTid))
			{
				// We're playing Chex Quest 3
				for(counters = 0; counters < MAXMONSTERS_CHEX; counters++)
				{
					generatorCountersChex[counters] = ThingCountName(SpawnersChex[counters],0);
				}

				for(selector = 0; selector < MAXMONSTERS_CHEX; selector++)
				{
					currentCounterForSelector = generatorCountersChex[selector];

					if(currentCounterForSelector > 0)
					{
						if(selector < minSelector)
							minSelector = selector;
						if(selector > maxSelector)
							maxSelector = selector;
					}
					totalTypes += currentCounterForSelector;
					generationAmount += currentCounterForSelector*(selector+1);
				}
				break;
			}
			else
			{
				// We're playing Chex Quest 1
				Thing_Remove(CQ1CheckTid);
				for(counters = 0; counters < MAXMONSTERS_CHEXORIGINAL; counters++)
				{
					generatorCountersChexOriginal[counters] = ThingCountName(SpawnersChexOriginal[counters],0);
				}

				for(selector = 0; selector < MAXMONSTERS_CHEXORIGINAL; selector++)
				{
					currentCounterForSelector = generatorCountersChexOriginal[selector];

					if(currentCounterForSelector > 0)
					{
						if(selector < minSelector)
							minSelector = selector;
						if(selector > maxSelector)
							maxSelector = selector;
					}
					totalTypes += currentCounterForSelector;
					generationAmount += currentCounterForSelector*(selector+1);
				}
				break;
			}

		case 4:
			for(counters = 0; counters < MAXMONSTERS_HERETIC; counters++)
			{
				generatorCountersHeretic[counters] = ThingCountName(SpawnersHeretic[counters],0);
			}

			for(selector = 0; selector < MAXMONSTERS_HERETIC; selector++)
			{
				currentCounterForSelector = generatorCountersHeretic[selector];

				if(currentCounterForSelector > 0)
				{
					if(selector < minSelector)
						minSelector = selector;
					if(selector > maxSelector)
						maxSelector = selector;
				}
				totalTypes += currentCounterForSelector;
				generationAmount += currentCounterForSelector*(selector+1);
			}
			break;

		case 8:
			for(counters = 0; counters < MAXMONSTERS_HEXEN; counters++)
			{
				generatorCountersHexen[counters] = ThingCountName(SpawnersHexen[counters],0);
			}

			for(selector = 0; selector < MAXMONSTERS_HEXEN; selector++)
			{
				currentCounterForSelector = generatorCountersHexen[selector];

				if(currentCounterForSelector > 0)
				{
					if(selector < minSelector)
						minSelector = selector;
					if(selector > maxSelector)
						maxSelector = selector;
				}
				totalTypes += currentCounterForSelector;
				generationAmount += currentCounterForSelector*(selector+1);
			}
			break;

		case 16:
			for(counters = 0; counters < MAXMONSTERS_STRIFE; counters++)
			{
				generatorCountersStrife[counters] = ThingCountName(SpawnersStrife[counters],0);
			}

			for(selector = 0; selector < MAXMONSTERS_STRIFE; selector++)
			{
				currentCounterForSelector = generatorCountersStrife[selector];

				if(currentCounterForSelector > 0)
				{
					if(selector < minSelector)
						minSelector = selector;
					if(selector > maxSelector)
						maxSelector = selector;
				}
				totalTypes += currentCounterForSelector;
				generationAmount += currentCounterForSelector*(selector+1);
			}
			break;

		case 32:
			for(counters = 0; counters < MAXMONSTERS_HACX; counters++)
			{
				generatorCountersHacx[counters] = ThingCountName(SpawnersHacx[counters],0);
			}

			for(selector = 0; selector < MAXMONSTERS_HACX; selector++)
			{
				currentCounterForSelector = generatorCountersHacx[selector];

				if(currentCounterForSelector > 0)
				{
					if(selector < minSelector)
						minSelector = selector;
					if(selector > maxSelector)
						maxSelector = selector;
				}
				totalTypes += currentCounterForSelector;
				generationAmount += currentCounterForSelector*(selector+1);
			}
			break;

		case 64:
			for(counters = 0; counters < MAXMONSTERS_HARMONY; counters++)
			{
				generatorCountersHarmony[counters] = ThingCountName(SpawnersHarmony[counters],0);
			}

			for(selector = 0; selector < MAXMONSTERS_HARMONY; selector++)
			{
				currentCounterForSelector = generatorCountersHarmony[selector];

				if(currentCounterForSelector > 0)
				{
					if(selector < minSelector)
						minSelector = selector;
					if(selector > maxSelector)
						maxSelector = selector;
				}
				totalTypes += currentCounterForSelector;
				generationAmount += currentCounterForSelector*(selector+1);
			}
			break;

		case 128:
			for(counters = 0; counters < MAXMONSTERS_ROTWB; counters++)
			{
				generatorCountersROTWB[counters] = ThingCountName(SpawnersROTWB[counters],0);
			}

			for(selector = 0; selector < MAXMONSTERS_ROTWB; selector++)
			{
				currentCounterForSelector = generatorCountersROTWB[selector];

				if(currentCounterForSelector > 0)
				{
					if(selector < minSelector)
						minSelector = selector;
					if(selector > maxSelector)
						maxSelector = selector;
				}
				totalTypes += currentCounterForSelector;
				generationAmount += currentCounterForSelector*(selector+1);
			}
			break;

		case 256:
			for(counters = 0; counters < MAXMONSTERS_REKKR; counters++)
			{
				generatorCountersREKKR[counters] = ThingCountName(SpawnersREKKR[counters],0);
			}

			for(selector = 0; selector < MAXMONSTERS_REKKR; selector++)
			{
				currentCounterForSelector = generatorCountersREKKR[selector];

				if(currentCounterForSelector > 0)
				{
					if(selector < minSelector)
						minSelector = selector;
					if(selector > maxSelector)
						maxSelector = selector;
				}
				totalTypes += currentCounterForSelector;
				generationAmount += currentCounterForSelector*(selector+1);
			}
			break;
	}

	selectorBias = FixedDiv(generationAmount*1.0,totalTypes*1.0) - 1.0;
	selectorBias = FixedMul(selectorBias,1.0+((GameSkill()-3) * 0.25));
}

script "CellDoneScanningReMixer" (void)
{
	int newtid = UniqueTid();
	for(int a = -512; a < 512; a+=64)
	{
		for(int b = -512; b < 512; b+=64)
		{
			if(random(1,12000 + (2000 * (4 - GameSkill()))) <= (GetCVar("mm_generate")*GetCVar("mm_generate")))
			{
				SpawnForced("DetermineValidSpawnTestObject",GetActorX(0)+(a*1.0),GetActorY(0)+(b*1.0),0,newtid);
				if(GetCVar("samsara_zscriptready") >= 1)
					Spawn("DetermineValidSpawnReMixerZS",GetActorX(0)+(a*1.0),GetActorY(0)+(b*1.0),GetActorFloorZ(newtid),0);
				else
					Spawn("DetermineValidSpawnReMixer",GetActorX(0)+(a*1.0),GetActorY(0)+(b*1.0),GetActorFloorZ(newtid),0);
			}
		}
	}
}

Script "SMMGeneratorSelector" (void)
{
	if(generationAmount <= 0)
		terminate;

	int game = GetCVar("samsara_currentgame");

	Delay(1);
	int newTid = UniqueTid();
	int influence = 1.0;
	int pickMonster = 0;
	int selectionAttempts = 0;
	int maxSelectionAttempts = 8;

	int actorX = GetActorX(0)/1.0;
	int actorY = GetActorY(0)/1.0;

	int floor1 = GetSectorFloorZ(0,actorX-32,actorY);
	int floor2 = GetSectorFloorZ(0,actorX+32,actorY);
	int floor3 = GetSectorFloorZ(0,actorX,actorY-32);
	int floor4 = GetSectorFloorZ(0,actorX,actorY+32);

	if(floor1 != floor2 || floor1 != floor3 || floor1 != floor4)
		terminate;

	int rnd, mix;

	switch(game)
	{
		case 1:
			pickMonster = 24;
			while((pickMonster == 23 || pickMonster == 24) && selectionAttempts < maxSelectionAttempts)
			{
				rnd = random(minSelector,maxSelector);
				mix = FixedMul(random(0.0,1.0),influence);
				pickMonster = roundZandronum((rnd * (1.0 - mix)) + FixedMul(selectorBias,mix));
				selectionAttempts++;
			}
			if(selectionAttempts >= maxSelectionAttempts)
				terminate;

			if(!spawnSecretMonsters && pickMonster == 3)
			{
				pickMonster = 2;
			}

			SpawnForced(StrParam(s:SpawnersDoom[pickMonster],s:"Generator"),GetActorX(0),GetActorY(0),GetActorZ(0),newTid);
			break;

		case 2:
			// Check if we're playing Chex Quest 3 or Chex Quest 1
			int CQ1CheckTid2 = UniqueTid();

			if(!SpawnForced("FlemoidusCommonus2_CQ1",0,0,0,CQ1CheckTid2))
			{
				// We're playing Chex Quest 3
				pickMonster = 11;
				while((pickMonster == 11 || pickMonster == 12) && selectionAttempts < maxSelectionAttempts)
				{
					rnd = random(minSelector,maxSelector);
					mix = FixedMul(random(0.0,1.0),influence);
					pickMonster = roundZandronum((rnd * (1.0 - mix)) + FixedMul(selectorBias,mix));
					selectionAttempts++;
				}
				if(selectionAttempts >= maxSelectionAttempts)
					terminate;

				SpawnForced(StrParam(s:SpawnersChex[pickMonster],s:"Generator"),GetActorX(0),GetActorY(0),GetActorZ(0),newTid);
				break;
			}
			else
			{
				// We're playing Chex Quest 1
				Thing_Remove(CQ1CheckTid2);
				pickMonster = 3;
				while((pickMonster == 3 || pickMonster == 4) && selectionAttempts < maxSelectionAttempts)
				{
					rnd = random(minSelector,maxSelector);
					mix = FixedMul(random(0.0,1.0),influence);
					pickMonster = roundZandronum((rnd * (1.0 - mix)) + FixedMul(selectorBias,mix));
					selectionAttempts++;
				}
				if(selectionAttempts >= maxSelectionAttempts)
					terminate;

				SpawnForced(StrParam(s:SpawnersChex[pickMonster],s:"Generator_CQ1"),GetActorX(0),GetActorY(0),GetActorZ(0),newTid);
				break;
			}

		case 4:
			pickMonster = 13;
			while((pickMonster == 13 || pickMonster == 14) && selectionAttempts < maxSelectionAttempts)
			{
				rnd = random(minSelector,maxSelector);
				mix = FixedMul(random(0.0,1.0),influence);
				pickMonster = roundZandronum((rnd * (1.0 - mix)) + FixedMul(selectorBias,mix));
				selectionAttempts++;
			}
			if(selectionAttempts >= maxSelectionAttempts)
				terminate;

			SpawnForced(StrParam(s:SpawnersHeretic[pickMonster],s:"Generator"),GetActorX(0),GetActorY(0),GetActorZ(0),newTid);
			break;

		case 8:
			pickMonster = 15;
			while((pickMonster == 15 || pickMonster == 16) && selectionAttempts < maxSelectionAttempts)
			{
				rnd = random(minSelector,maxSelector);
				mix = FixedMul(random(0.0,1.0),influence);
				pickMonster = roundZandronum((rnd * (1.0 - mix)) + FixedMul(selectorBias,mix));
				selectionAttempts++;
			}
			if(selectionAttempts >= maxSelectionAttempts)
				terminate;

			SpawnForced(StrParam(s:SpawnersHexen[pickMonster],s:"Generator"),GetActorX(0),GetActorY(0),GetActorZ(0),newTid);
			break;

		case 16:
			pickMonster = 5;
			while((pickMonster == 5 || pickMonster == 6) && selectionAttempts < maxSelectionAttempts)
			{
				rnd = random(minSelector,maxSelector);
				mix = FixedMul(random(0.0,1.0),influence);
				pickMonster = roundZandronum((rnd * (1.0 - mix)) + FixedMul(selectorBias,mix));
				selectionAttempts++;
			}
			if(selectionAttempts >= maxSelectionAttempts)
				terminate;

			SpawnForced(StrParam(s:SpawnersStrife[pickMonster]),GetActorX(0),GetActorY(0),GetActorZ(0),newTid);
			break;

		case 32:
			pickMonster = 15;
			while((pickMonster == 15 || pickMonster == 16) && selectionAttempts < maxSelectionAttempts)
			{
				rnd = random(minSelector,maxSelector);
				mix = FixedMul(random(0.0,1.0),influence);
				pickMonster = roundZandronum((rnd * (1.0 - mix)) + FixedMul(selectorBias,mix));
				selectionAttempts++;
			}
			if(selectionAttempts >= maxSelectionAttempts)
				terminate;

			SpawnForced(StrParam(s:SpawnersHacx[pickMonster],s:"Generator"),GetActorX(0),GetActorY(0),GetActorZ(0),newTid);
			break;

		case 64:
			pickMonster = 7;
			while((pickMonster == 7 || pickMonster == 8) && selectionAttempts < maxSelectionAttempts)
			{
				rnd = random(minSelector,maxSelector);
				mix = FixedMul(random(0.0,1.0),influence);
				pickMonster = roundZandronum((rnd * (1.0 - mix)) + FixedMul(selectorBias,mix));
				selectionAttempts++;
			}
			if(selectionAttempts >= maxSelectionAttempts)
				terminate;

			SpawnForced(StrParam(s:SpawnersHarmony[pickMonster],s:"Generator"),GetActorX(0),GetActorY(0),GetActorZ(0),newTid);
			break;

		case 128:
			pickMonster = 15;
			while((pickMonster == 15 || pickMonster == 16) && selectionAttempts < maxSelectionAttempts)
			{
				rnd = random(minSelector,maxSelector);
				mix = FixedMul(random(0.0,1.0),influence);
				pickMonster = roundZandronum((rnd * (1.0 - mix)) + FixedMul(selectorBias,mix));
				selectionAttempts++;
			}
			if(selectionAttempts >= maxSelectionAttempts)
				terminate;

			SpawnForced(StrParam(s:SpawnersROTWB[pickMonster],s:"Generator"),GetActorX(0),GetActorY(0),GetActorZ(0),newTid);
			break;

		case 256:
			pickMonster = 14;
			while((pickMonster == 14 || pickMonster == 15 || pickMonster == 16 || pickMonster == 17) && selectionAttempts < maxSelectionAttempts)
			{
				rnd = random(minSelector,maxSelector);
				mix = FixedMul(random(0.0,1.0),influence);
				pickMonster = roundZandronum((rnd * (1.0 - mix)) + FixedMul(selectorBias,mix));
				selectionAttempts++;
			}
			if(selectionAttempts >= maxSelectionAttempts)
				terminate;

			SpawnForced(StrParam(s:SpawnersREKKR[pickMonster],s:"Generator"),GetActorX(0),GetActorY(0),GetActorZ(0),newTid);
			break;
	}

	ThrustThing(random(0,1.0),random(0,8),0,newTid);
	SetActorAngle(newTid,0.125*random(0,8));
	Thing_ChangeTid(newTid,0);
}

Script "SMMReducer" (int pruneMax, int important, int monsterSlot)
{
	int typeCount = 0;
	int pruneIt = 1;
	int posX = GetActorX(0)>>16;
	int posY = GetActorY(0)>>16;
	int posZ = GetActorZ(0)>>16;
	//int positionValue = sqrt(posX * posX + posY * posY + posZ * posZ);
	int positionValue = abs(posX) + abs(posY) + abs(posZ);
	int noPruning = pruneMax == 99;

	switch(GetCVar("samsara_currentgame"))
	{
		case 1:
			typeCount = generatorCountersDoom[monsterSlot];
			break;

		case 2:
			monsterSlot -= MAXMONSTERS_DOOM;

			// Check if we're playing Chex Quest 3 or Chex Quest 1
			int CQ1CheckTid3 = UniqueTid();

			if(!SpawnForced("FlemoidusCommonus2_CQ1",0,0,0,CQ1CheckTid3))
			{
				// We're playing Chex Quest 3
				typeCount = generatorCountersChex[monsterSlot];
			}
			else
			{
				// We're playing Chex Quest 1
				Thing_Remove(CQ1CheckTid3);
				typeCount = generatorCountersChexOriginal[monsterSlot];
			}
			break;

		case 4:
			monsterSlot -= MAXMONSTERS_DOOM-MAXMONSTERS_CHEX;
			typeCount = generatorCountersHeretic[monsterSlot];
			break;

		case 8:
			monsterSlot -= MAXMONSTERS_DOOM-MAXMONSTERS_CHEX-MAXMONSTERS_HERETIC;
			typeCount = generatorCountersHexen[monsterSlot];
			break;

		case 32:
			typeCount = generatorCountersHacx[monsterSlot];
			break;

		case 64:
			typeCount = generatorCountersHarmony[monsterSlot];
			break;

		case 128:
			typeCount = generatorCountersROTWB[monsterSlot];
			break;

		case 256:
			typeCount = generatorCountersREKKR[monsterSlot];
			break;
	}

	pruneMax += GetCVar("mm_reduceMonsters");

	if(!noPruning)
	{
		if(typeCount <= 1)
			pruneMax += 1.0;
		else
		{
			if(typeCount <= totalMonsters / 20)
				pruneMax = important ? (pruneMax * 7) / 4 : (pruneMax * 3) / 2;
			else if(typeCount <= totalMonsters / 10)
				pruneMax = important ? (pruneMax * 3) / 2 : (pruneMax * 4) / 3;
			else if(typeCount >= (totalMonsters / 3))
				pruneMax = (pruneMax * 3) / 4;

			if(GetActorProperty(0,APROP_Height) < 100.0)
				pruneMax = FixedMul(pruneMax * 1.0,(1.0 - monsterSlot * 0.025))>>16;
		}
	}
	else if(GetCVar("mm_reduceMonsters") >= 0) pruneMax += 1.0;

	if(pruneMax < 0) pruneMax = 0;
	if(pruneMax > 99) pruneMax = 99;

	if((positionValue % 100) <= pruneMax)
		pruneIt = 0;

	SetResultValue(pruneIt);
}