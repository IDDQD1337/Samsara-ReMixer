str GuardTypes[15] = { "ArmorGuard", "BlueCamGuard", "CamGuard", "CommGuard", "GrayGuard", "GreatGuard", "GreatGuard2", "MoonFemale", "MoonGuard", "NavyGuard", "OliveGuard", "Ourumov", "RusGuard", "TrevGuard", "SnowGuard" };
str HeadTypes[29] = { "Alan", "B", "Chris", "Dave", "Des", "Duncan", "Dwayne", "Graeme", "Grant", "Jim", "Joel", "Joe2", "Joe", "Karl", "Ken", "Lee", "Mark", "Martin", "Neil", "Pete", "Robin", "Scott", "Shaun", "Stevee", "Steveh", "Mandy", "Marion", "Sally", "Vivien" };
str HatTypes[13] = { "", "BeretBlack", "BeretBlue", "BeretRed", "FurHatBlack", "FurHatBlue", "FurHatBrown", "HelmetGray", "HelmetGreen", "MoonHeadGear", "PeakedCap", "SideHatDarkGreen", "SideHatLightGreen" };
str GunTypes[24] = { "PP7", "DD44", "DualDD44", "Klobb", "DualKlobb", "KF7", "ZMG", "DualZMG", "D5k", "DualD5k", "Phantom", "DualPhantom", "AR33", "DualAR33", "RCP90", "AutoShotgun", "Sniper", "Cougar", "DualCougar", "Laser", "GrenadeLauncher", "RocketLauncher", "SiberianCombo", "XeniaCombo" };

function int SetPointerExt(int assign_slot, int tid, int assign_to_tid) 
{
	int a = ActivatorTID(); // Get original activator tid if there is an activator (I have ASSUMED that it returns 0 if there is no activator)
	Thing_ChangeTID(0, UniqueTID()); // Create temporary, unique activator tid
	int temp = ActivatorTID(); // Get temporary activator tid (0 if there is no activator)

	if(SetActivator(assign_to_tid)) 
		SetPointer(assign_slot, temp); // If an activator (assign_to_tid) is set, assign a pointer value to it.
	if(SetActivator(temp)) 
		Thing_ChangeTID(0, a); // If an activator (temp) is set, restore its original tid (a).
		
	return 0;
}

Script "Goldeneye_HatShot" (void)
{
	str thrownhat = HatTypes[CheckInventory("Goldeneye_HatShotToken")];
	if(StrLen(thrownhat) == 0)
		terminate;

	if(CheckInventory("Goldeneye_HatShotToken") == 7 || CheckInventory("Goldeneye_HatShotToken") == 8)
	{
		PlaySound(0,"Goldeneye/SlapperMetal",CHAN_7,1.0,0,ATTN_NORM);
		SetResultValue(-1);
		if(random(0,1) == 1)
		{
			terminate;
		}
	}
	else 
	{ 
		SetResultValue(3); 
	}
	SpawnForced(StrParam(s:"Goldeneye_",s:thrownhat,s:"_Drop"),GetActorX(0),GetActorY(0),GetActorZ(0) + 48.0,0,0);
	GiveInventory("Goldeneye_HatRemoval",1);
	TakeInventory("Goldeneye_HatShotToken",12);
	
	/*GiveInventory("Goldeneye_HatShotToken",1);
	int a;
	str thisclass = GetActorClass(0);
	str pass, body, head, sunglasses, hat, thrownhat, gun, newclass;
	if(strcmp(thisclass,"Goldeneye_",StrLen("Goldeneye_")) != 0)
		terminate;
		
	pass = StrRight(thisclass, StrLen(thisclass)-StrLen("Goldeneye_"));
	for(a = 0; a < 14; a++)
	{
		if(strcmp(GuardTypes[a],pass,StrLen(GuardTypes[a])) == 0)
		{
			body = GuardTypes[a];
			break;
		}
	}
	if(strlen(body) == 0)
		terminate;
		
	newclass = StrParam(s:"Goldeneye_",s:body,s:"_");
	pass = StrRight(thisclass,StrLen(thisclass)-StrLen(newclass));
	for(a = 0; a < 29; a++)
	{
		if(strcmp(HeadTypes[a],pass,StrLen(HeadTypes[a])) == 0)
		{
			head = HeadTypes[a];
			break;
		}
	}
	newclass = StrParam(s:"Goldeneye_",s:body,s:"_",s:head);
	pass = StrRight(thisclass,StrLen(thisclass)-StrLen(newclass));
	
	if(strcmp("-SG",pass,StrLen("-SG")) == 0)
		sunglasses = "-SG";		
	newclass = StrParam(s:"Goldeneye_",s:body,s:"_",s:head,s:sunglasses,s:"_");
	
	pass = StrRight(thisclass,StrLen(thisclass)-StrLen(newclass));	
	
	if(strcmp(pass,HatTypes[0],StrLen(HatTypes[0])) == 0)
		terminate;

	for(a = 0; a < 13; a++)
	{
		if(strcmp(HatTypes[a],pass,StrLen(HatTypes[a])) == 0)
		{
			thrownhat = HatTypes[a];
			hat = "NoHat";
			if(thrownhat == "HelmetGray" || thrownhat == "HelmetGreen")
			{
				SetResultValue(-1);
				PlaySound(0,"Goldeneye/SlapperMetal",CHAN_7,1.0,0,ATTN_NORM);
				if(random(0,1) == 1)
				{
					terminate;
				}
			}
			else
				SetResultValue(3);
			break;
		}
	}
	newclass = StrParam(s:"Goldeneye_",s:body,s:"_",s:head,s:sunglasses,s:"_",s:thrownhat,s:"_");
	
	pass = StrRight(thisclass,StrLen(thisclass)-StrLen(newclass));
	for(a = 0; a < 24; a++)
	{
		if(strcmp(GunTypes[a],pass,StrLen(GunTypes[a])) == 0)
		{
			gun = GunTypes[a];
			break;
		}
	}
	newclass = StrParam(s:"Goldeneye_",s:body,s:"_",s:head,s:sunglasses,s:"_",s:hat,s:"_",s:gun);
	
	int hattid = ActivatorTid();
	int newhattid = UniqueTid();
	int hatlesstid = UniqueTid();
	int health = GetActorProperty(0,APROP_Health);
	Thing_ChangeTID(hattid, newhattid);
	SpawnSpotFacingForced(newclass,newhattid,hatlesstid);
	SpawnForced(StrParam(s:"Goldeneye_",s:thrownhat),GetActorX(0),GetActorY(0),GetActorZ(0) + 48.0,0,0);
	SetActorProperty(hatlesstid,APROP_Health,health);
	SetActivator(0,AAPTR_MASTER);
	SetPointerExt(AAPTR_MASTER,0,hatlesstid);
	SetActivator(newhattid);
	SetActivator(0,AAPTR_TARGET);
	SetPointerExt(AAPTR_TARGET,0,hatlesstid);
	SetActivator(newhattid);
	Thing_ChangeTID(newhattid, hattid);
	Thing_ChangeTID(hatlesstid, hattid);
	Thing_Remove(0);
	SetActivator(hattid,AAPTR_MASTER);*/
}

Script "GoldeneyePartPositioner" (void)
{
	ACS_NamedExecuteAlways("GoldeneyeHatRemover",0,0,0,0);
	while(ClassifyActor(0) != 1)
	{
		//SetActorPosition(newtid,GetActorX(0),GetActorY(0),GetActorZ(0),0);
		Warp(AAPTR_MASTER,0,0,0,0,WARPF_NOCHECKPOSITION|WARPF_USEPTR|WARPF_COPYINTERPOLATION);
		Delay(1);
	}
}

Script "GoldeneyeHatRemover" (void)
{
	if(!CheckInventory("Goldeneye_IsHat"))
		terminate;
		
	int newtid = UniqueTid();
	Thing_ChangeTid(0,newtid);
		
	SetActivator(0,AAPTR_MASTER);
	While(!CheckInventory("Goldeneye_HatRemoval"))
	{
		Delay(1);
	}
	SetActivator(newtid,AAPTR_Default);
	Thing_Remove(0);
}

Script "GoldeneyeEnemyPartsPicker" (int type, int ec)
{
	str glasses;
	int elitechance, hattype, guntype, randnum;
	int newtid = UniqueTID();
	int bodytid = UniqueTID();
	int headtid = UniqueTID();
	int hattid = UniqueTID();
	int guntid = UniqueTID();
	int activator = ActivatorTID();
	Thing_ChangeTID(0, newtid);
	//Spawn the parts
	if(type != 6)
	{
		elitechance = ec; 
		int eliterand = random(0,100);
		if(elitechance > eliterand)
			glasses = "_Shades";
		else if(elitechance != -1)
			glasses = "_NoShades";
		else
			glasses = "";			
		int randomhead = random(0,24);
		if(HeadTypes[randomhead] == "Joe2")
			glasses = "";
		SpawnForced(StrParam(s:"Goldeneye_",s:HeadTypes[randomhead],s:glasses),0,0,0,headtid);
		SetActivator(headtid,AAPTR_DEFAULT);
	}
	SetPointer(AAPTR_MASTER,newtid);		
	switch(type)
	{
		case 1:	
			SpawnForced(StrParam(s:"Goldeneye_Body_",s:GuardTypes[6]),0,0,0,bodytid);
			SetActivator(bodytid,AAPTR_DEFAULT);
			SetPointer(AAPTR_MASTER,newtid);		
			randnum = random(0,100);
			if(randnum >= 50) 
				hattype = 6;
			SpawnForced(StrParam(s:"Goldeneye_",s:HatTypes[hattype]),0,0,0,hattid);
			SetActivator(hattid,AAPTR_DEFAULT);
			SetPointer(AAPTR_MASTER,newtid);
			
			guntype = 5;
			SpawnForced(StrParam(s:"Goldeneye_Gun_",s:GunTypes[guntype]),0,0,0,guntid);
			SetActivator(guntid,AAPTR_DEFAULT);
			SetPointer(AAPTR_MASTER,newtid);
			SetActivator(0,AAPTR_Master);
			SetActorProperty(0,APROP_Mass,200+(1+guntype));
			GiveInventory("Goldeneye_HatShotToken",hattype);
			GiveActorInventory(hattid,"Goldeneye_IsHat",1);
			Thing_ChangeTID(bodytid,0);
			Thing_ChangeTID(headtid,0);
			Thing_ChangeTID(hattid,0);
			Thing_ChangeTID(guntid,0);
			Thing_ChangeTID(newtid,activator);
			break;
		case 2:	
			SpawnForced(StrParam(s:"Goldeneye_Body_",s:GuardTypes[5]),0,0,0,bodytid);
			SetActivator(bodytid,AAPTR_DEFAULT);
			SetPointer(AAPTR_MASTER,newtid);		
			randnum = random(0,100);
			if(randnum >= 66) 
				hattype = 4;
			else if(randnum >= 33) 
				hattype = 1;
			SpawnForced(StrParam(s:"Goldeneye_",s:HatTypes[hattype]),0,0,0,hattid);
			SetActivator(hattid,AAPTR_DEFAULT);
			SetPointer(AAPTR_MASTER,newtid);
			
			if(randnum >= 80)
				guntype = 2;
			else if(randnum >= 40)
				guntype = 1;
			else if(randnum >= 20)
				guntype = 5;
			SpawnForced(StrParam(s:"Goldeneye_Gun_",s:GunTypes[guntype]),0,0,0,guntid);
			SetActivator(guntid,AAPTR_DEFAULT);
			SetPointer(AAPTR_MASTER,newtid);
			SetActivator(0,AAPTR_Master);
			SetActorProperty(0,APROP_Mass,200+(1+guntype));
			GiveInventory("Goldeneye_HatShotToken",hattype);
			GiveActorInventory(hattid,"Goldeneye_IsHat",1);
			Thing_ChangeTID(bodytid,0);
			Thing_ChangeTID(headtid,0);
			Thing_ChangeTID(hattid,0);
			Thing_ChangeTID(guntid,0);
			Thing_ChangeTID(newtid,activator);
			break;
		case 3:	
			SpawnForced(StrParam(s:"Goldeneye_Body_",s:GuardTypes[10]),0,0,0,bodytid);
			SetActivator(bodytid,AAPTR_DEFAULT);
			SetPointer(AAPTR_MASTER,newtid);		
			randnum = random(0,100);
			if(randnum >= 66) 
				hattype = 11;
			else if(randnum >= 33) 
				{ hattype = 8; SetActorProperty(newtid,APROP_Health,60); }
			SpawnForced(StrParam(s:"Goldeneye_",s:HatTypes[hattype]),0,0,0,hattid);
			SetActivator(hattid,AAPTR_DEFAULT);
			SetPointer(AAPTR_MASTER,newtid);
			
			if(randnum <=9)
				guntype = 4;
			else if(randnum <= 15)
				guntype = 3;
			else	
				guntype = 5;
			SpawnForced(StrParam(s:"Goldeneye_Gun_",s:GunTypes[guntype]),0,0,0,guntid);
			SetActivator(guntid,AAPTR_DEFAULT);
			SetPointer(AAPTR_MASTER,newtid);
			SetActivator(0,AAPTR_Master);
			SetActorProperty(0,APROP_Mass,200+(1+guntype));
			GiveInventory("Goldeneye_HatShotToken",hattype);
			GiveActorInventory(hattid,"Goldeneye_IsHat",1);
			Thing_ChangeTID(bodytid,0);
			Thing_ChangeTID(headtid,0);
			Thing_ChangeTID(hattid,0);
			Thing_ChangeTID(guntid,0);
			Thing_ChangeTID(newtid,activator);
			break;
		case 4:	
			SpawnForced(StrParam(s:"Goldeneye_Body_",s:GuardTypes[12]),0,0,0,bodytid);
			SetActivator(bodytid,AAPTR_DEFAULT);
			SetPointer(AAPTR_MASTER,newtid);		
			randnum = random(0,100);
			if(randnum >= 50) 
				{ hattype = 7; SetActorProperty(newtid,APROP_Health,80); }
			SpawnForced(StrParam(s:"Goldeneye_",s:HatTypes[hattype]),0,0,0,hattid);
			SetActivator(hattid,AAPTR_DEFAULT);
			SetPointer(AAPTR_MASTER,newtid);
			
			guntype = 5;
			SpawnForced(StrParam(s:"Goldeneye_Gun_",s:GunTypes[guntype]),0,0,0,guntid);
			SetActivator(guntid,AAPTR_DEFAULT);
			SetPointer(AAPTR_MASTER,newtid);
			SetActivator(0,AAPTR_Master);
			SetActorProperty(0,APROP_Mass,200+(1+guntype));
			GiveInventory("Goldeneye_HatShotToken",hattype);
			GiveActorInventory(hattid,"Goldeneye_IsHat",1);
			Thing_ChangeTID(bodytid,0);
			Thing_ChangeTID(headtid,0);
			Thing_ChangeTID(hattid,0);
			Thing_ChangeTID(guntid,0);
			Thing_ChangeTID(newtid,activator);
			break;		
		case 5:	
			SetActorProperty(newtid,APROP_Health,100);
			SpawnForced(StrParam(s:"Goldeneye_Body_",s:GuardTypes[1]),0,0,0,bodytid);
			SetActivator(bodytid,AAPTR_DEFAULT);
			SetPointer(AAPTR_MASTER,newtid);		
			randnum = random(0,100);
			if(glasses == "_Shades")
			{
				SetActorProperty(newtid,APROP_Health,160);
				if(randnum >= 50)
					hattype = 2;
				else
					hattype = 0;
			}
			else
			{
				if(randnum >= 50)
					hattype = 5;
				else 
					hattype = 0;
			}		
			SpawnForced(StrParam(s:"Goldeneye_",s:HatTypes[hattype]),0,0,0,hattid);
			SetActivator(hattid,AAPTR_DEFAULT);
			SetPointer(AAPTR_MASTER,newtid);
			
			randnum = random(0,100);
			if(glasses == "_Shades")
			{
				if(randnum >= 50)
					guntype = 4;
				else
					guntype = 2;
			}
			else
			{
				if(randnum >= 50)
					guntype = 3;
				else
					guntype = 5;
			}	
			SpawnForced(StrParam(s:"Goldeneye_Gun_",s:GunTypes[guntype]),0,0,0,guntid);
			SetActivator(guntid,AAPTR_DEFAULT);
			SetPointer(AAPTR_MASTER,newtid);
			SetActivator(0,AAPTR_Master);
			SetActorProperty(0,APROP_Mass,200+(1+guntype));
			GiveInventory("Goldeneye_HatShotToken",hattype);
			GiveActorInventory(hattid,"Goldeneye_IsHat",1);
			Thing_ChangeTID(bodytid,0);
			Thing_ChangeTID(headtid,0);
			Thing_ChangeTID(hattid,0);
			Thing_ChangeTID(guntid,0);
			Thing_ChangeTID(newtid,activator);
			break;	
		case 6:	
			SetActorProperty(newtid,APROP_Health,180);
			SpawnForced(StrParam(s:"Goldeneye_Body_",s:GuardTypes[14]),0,0,0,bodytid);
			SetActivator(bodytid,AAPTR_DEFAULT);
			SetPointer(AAPTR_MASTER,newtid);		
			randnum = random(0,100);
			if(randnum >= 66) 
				guntype = 5;
			else if(randnum >= 33) 
				guntype = 3;
			else
				guntype = 16;
			SpawnForced(StrParam(s:"Goldeneye_Gun_",s:GunTypes[guntype]),0,0,0,guntid);
			SetActivator(guntid,AAPTR_DEFAULT);
			SetPointer(AAPTR_MASTER,newtid);
			SetActivator(0,AAPTR_Master);
			SetActorProperty(0,APROP_Mass,200+(1+guntype));
			Thing_ChangeTID(bodytid,0);
			Thing_ChangeTID(guntid,0);
			Thing_ChangeTID(newtid,activator);
			break;
		case 7:	
			SpawnForced(StrParam(s:"Goldeneye_Body_",s:GuardTypes[3]),0,0,0,bodytid);
			SetActivator(bodytid,AAPTR_DEFAULT);
			SetPointer(AAPTR_MASTER,newtid);
			SpawnForced(StrParam(s:"Goldeneye_",s:HatTypes[10]),0,0,0,hattid);
			hattype = 10;
			SetActivator(hattid,AAPTR_DEFAULT);
			SetPointer(AAPTR_MASTER,newtid);
			randnum = random(0,100);
			if(randnum >= 66) { guntype = 0; GiveInventory("Goldeneye_GrenadeThrower",1); }
			else if(randnum >= 33) 
				guntype = 1;
			else
				guntype = 3;
			SetActorProperty(newtid,APROP_Health,50);
			SpawnForced(StrParam(s:"Goldeneye_Gun_",s:GunTypes[guntype]),0,0,0,guntid);
			SetActivator(guntid,AAPTR_DEFAULT);
			SetPointer(AAPTR_MASTER,newtid);
			SetActivator(0,AAPTR_Master);
			SetActorProperty(0,APROP_Mass,200+(1+guntype));
			GiveInventory("Goldeneye_HatShotToken",hattype);
			GiveActorInventory(hattid,"Goldeneye_IsHat",1);
			Thing_ChangeTID(bodytid,0);
			Thing_ChangeTID(guntid,0);
			Thing_ChangeTID(newtid,activator);
			break;
	}
}

Script "GoldeneyePartBroadcast" (int state)
{
	switch(state)
	{
		case 1:
			SetActorState(0,"Spawn2",true);
			break;
		case 2:
			SetActorState(0,"SeeTwoHand",true);
			break;
		case 3:
			SetActorState(0,"SpawnDual",true);
			break;
		case 4:
			SetActorState(0,"IdleAdjustCrotch",true);
			break;
		case 5:
			SetActorState(0,"IdleScratchButt",true);
			break;
		case 6:
			SetActorState(0,"IdleScratchLeg",true);
			break;
		case 7:
			SetActorState(0,"IdleYawning",true);
			break;
		case 8:
			SetActorState(0,"IdleSwatFlies",true);
			break;
		case 9:
			SetActorState(0,"SeeSingleDual",true);
			break;
		case 10:
			SetActorState(0,"Pain.Neck",true);
			break;
		case 11:
			SetActorState(0,"Pain.LeftShoulder",true);
			break;
		case 12:
			SetActorState(0,"Pain.RightShoulder",true);
			break;
		case 13:
			SetActorState(0,"Pain.LeftArm",true);
			break;
		case 14:
			SetActorState(0,"Pain.RightArm",true);
			break;
		case 15:
			SetActorState(0,"Pain.LeftHand",true);
			break;
		case 16:
			SetActorState(0,"Pain.RightHand",true);
			break;
		case 17:
			SetActorState(0,"Pain.Crotch",true);
			break;
		case 18:
			SetActorState(0,"Pain.Butt",true);
			break;
		case 19:
			SetActorState(0,"Pain.Butt2",true);
			break;
		case 20:
			SetActorState(0,"Pain.LeftLeg",true);
			break;
		case 21:
			SetActorState(0,"Pain.RightLeg",true);
			break;
		case 22:
			SetActorState(0,"DeathHeadShot",true);
			break;
		case 23:
			SetActorState(0,"DeathNeck",true);
			break;
		case 24:
			SetActorState(0,"DeathOnKnees",true);
			break;
		case 25:
			SetActorState(0,"DeathOnSide",true);
			break;
		case 26:
			SetActorState(0,"DeathShoulderBack",true);
			break;
		case 27:
			SetActorState(0,"DeathCrossFeet",true);
			break;
		case 28:
			SetActorState(0,"DeathSprawlOut",true);
			break;
		case 29:
			SetActorState(0,"DeathFaceUp",true);
			break;
		case 30:
			SetActorState(0,"DeathFaceUpFlip",true);
			break;
		case 31:
			SetActorState(0,"DeathFetalLeft",true);
			break;
		case 32:
			SetActorState(0,"DeathFetalRight",true);
			break;
		case 33:
			SetActorState(0,"DeathJumpBack",true);
			break;
		case 34:
			SetActorState(0,"DeathStaggerWall",true);
			break;
		case 35:
			SetActorState(0,"DeathExplosionBack",true);
			break;
		case 36:
			SetActorState(0,"DeathExplosionBack2",true);
			break;
		case 37:
			SetActorState(0,"DeathExplosionForward",true);
			break;
		case 38:
			SetActorState(0,"DeathExplosionForwardRoll",true);
			break;
		case 39:
			SetActorState(0,"DeathExplosionLeft",true);
			break;
		case 40:
			SetActorState(0,"DeathExplosionLeft2",true);
			break;
		case 41:
			SetActorState(0,"DeathExplosionRight",true);
			break;
		case 42:
			SetActorState(0,"DeathFaceGround",true);
			break;
		case 43:
			SetActorState(0,"DeathFlyBack",true);
			break;
		case 44:
			SetActorState(0,"FireKF7AimBow",true);
			break;
		case 45:
			SetActorState(0,"FireKF7AimHip",true);
			break;
		case 46:
			SetActorState(0,"FireKF7AimToFire",true);
			break;
		case 47:
			SetActorState(0,"FireKF7Crouch",true);
			break;
		case 48:
			SetActorState(0,"FireKF7JumpToLeft",true);
			break;
		case 49:
			SetActorState(0,"FireKF7JumpToRight",true);
			break;
		case 50:
			SetActorState(0,"FireKF7RollLeft",true);
			break;
		case 51:
			SetActorState(0,"FireKF7RollRight",true);
			break;
		case 52:
			SetActorState(0,"FireDD44StepForward",true);
			break;		
		case 53:
			SetActorState(0,"FireDD44StepForwardEnd",true);
			break;	
		case 54:
			SetActorState(0,"FireDD44Kneel",true);
			break;	
		case 55:
			SetActorState(0,"FireDD44KneelEnd",true);
			break;			
		case 56:
			SetActorState(0,"FireDD44DualStand",true);
			break;	
		case 57:
			SetActorState(0,"FireDD44DualStandEnd",true);
			break;	
		case 58:
			SetActorState(0,"FireDD44DualKneel",true);
			break;	
		case 59:
			SetActorState(0,"FireDD44DualKneelEnd",true);
			break;	
		case 60:
			SetActorState(0,"FireDD44DualCrossKneel",true);
			break;	
		case 61:
			SetActorState(0,"FireDD44DualCrossKneelEnd",true);
			break;	
		case 62:
			SetActorState(0,"FireKlobbStepForward",true);
			break;		
		case 63:
			SetActorState(0,"FireKlobbKneel",true);
			break;		
		case 64:
			SetActorState(0,"FireKlobbDualStand",true);
			break;		
		case 65:
			SetActorState(0,"FireKlobbDualKneel",true);
			break;	
		case 66:
			SetActorState(0,"FireKlobbDualCrossKneel",true);
			break;		
		case 67:
			SetActorState(0,"FirePP7StepForward",true);
			break;		
		case 68:
			SetActorState(0,"FirePP7StepForwardEnd",true);
			break;	
		case 69:
			SetActorState(0,"FirePP7Kneel",true);
			break;	
		case 70:
			SetActorState(0,"FirePP7KneelEnd",true);
			break;	
		case 71:
			SetActorState(0,"Death.Zorch",true);
			break;	
		case 72:
			SetActorState(0,"Death.Ice",true);
			break;	
		case 73:
			SetActorState(0,"Disintegrate",true);
			break;	
		case 74:
			SetActorState(0,"Death.Nuke",true);
			break;	
		case 75:
			SetActorState(0,"ThrowGrenade",true);
			break;
		case 76:
			SetActorState(0,"Pain.Tesla",true);
			break;
	}
}