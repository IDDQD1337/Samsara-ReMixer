#library "SMMACS"
#include "zcommon.acs"
#include "commonFuncs.acs"

#define MAX_GAME_TYPES 34
#define MAX_ALTS 5
#define MONSTER_SLOT 73
#define MAXPERSLOT 20
#define MAX_ITEMS 15
#define MAX_STRING_ITEMS 6
#define MAX_ADDON_SETS 64

#include "Spawns.acs"

str SMMCVARINFO = "Stuff";
str SMMCHANGES = "Stuff";

str SAMSARA_CHANGELIST = "1.1";

str gameTypesStr[MAX_GAME_TYPES] = {
	"mm_doom", "mm_chex", "mm_heretic", "mm_wolf3d", "mm_hexen1", "mm_duke3d", "mm_marathon", "mm_quake1",
	"mm_rott", "mm_bstone", "mm_blood", "mm_strife", "mm_erad", "mm_c7", "mm_rmr", "mm_darkf", "mm_ipog",
	"mm_disrup", "mm_witch", "mm_halflife", "mm_sw", "mm_cm", "mm_ps", "mm_rr", "mm_quake2", "mm_hexen2",
	"mm_goldeneye", "mm_catacomb", "mm_painkiller", "mm_unreal", "mm_rtcw", "mm_quake3", "mm_descent", "mm_deusex"
};

str gameSetsStr[MAX_GAME_TYPES] = {
	"SetDoom", "SetChex", "SetHeretic", "SetWolf3d", "SetHexen1", "SetDuke3D", "SetMarathon", "SetQuake1", "SetRoTT", "SetBStone",
	"SetBlood", "SetStrife", "SetErad", "SetC7", "SetRmr", "SetDarkF", "SetIPOG", "SetDisrup", "SetWitch", "SetHL", "SetSW", "SetCM",
	"SetExhumed", "SetRR", "SetQuake2", "SetHexen2", "SetGoldeneye", "SetCatacomb", "SetPainkiller", "SetUnreal", "SetRTCW", "SetQuake3", "SetDescent", "SetDeusEx"
};

str gameClassesSTR[MAX_GAME_TYPES] = {
	"DoomguyPlayer2", "ChexWarrior2", "CorvusPlayer2", "WolfenPlayer2", "HexenPlayer2", "DukePlayer2", "MarathonPlayer2", "QuakePlayer2", "IPFreeley2", "BlakeStone2",
	"Caleb2", "StrifeGuyPlayer2", "Eleena2", "Corridor7Player2", "RebelMoonCommando2", "KatarnPlayer2", "POGreedPlayer2", "DisruptorPlayer2", "GrondovalPlayer2",
	"HalfLifePlayer2", "LoWangPlayer2", "CMPlayer2", "PSPlayer2", "Leonard2", "Bitterman2", "Demoness2", "JamesBond2", "PettonEverhail2", "DanielGarner2", "UnrealPlayer2", "RTCW_Blazkowicz2",
	"Q3Sarge2", "DescentPyroGX2", "JCDenton2"
};

int gamePruneValues[MAX_GAME_TYPES][MAX_ADDON_SETS] = {
	{99,99,99},{99},{73},{64,64,64},{84,84,84},{52,52,52},{68},{54},{63,63,63,63,63},{64,64},{36},{59},{53,53,53,53,53},{64},{77},{61},{68,68,68,68,68},{62},{78},{26,26},{36},{65},{54},{36},{40},{32},{28},{69},{67},{54},{32},{50},{60},{26}
};

str doomModes[4] = { "SetDoom", "SetDoom64", "SetDoomRandom", "SetDoom64AbsolutionOutcast" };
str wolfModes[3] = { "SetWolf3D", "SetSpear", "SetTotenkopf" };
str dukeModes[2] = { "SetDuke3D", "SetDukeLAB" };
str hlModes[2] =   { "SetHL", "SetHLOP" };

int activeSets = 0;
int activeSets2 = 0;
int activeSetsA = 0;
int pickFromSets[MAX_GAME_TYPES + MAX_ADDON_SETS];
int amountOfGameTypes[MAX_GAME_TYPES + MAX_ADDON_SETS];
int maxSetsEnabled = 0;
int monsterProcessing = 0;
int pickClear = 0;
int maxAltSets = 4;
int totalMonsters = 0;

#define MAX_MAPS				500

//Addon set info, not directly used
str addons[MAX_GAME_TYPES] = {};
#include "ReMixerAPI.acs"

global int 2:alreadyshowedbs;
//global int 4:lastchosen;

// ReMixer spawn generator. Want Doom 2 enemies in Ultimate Doom? This can do that!
#include "SMM_Generator.acs"

// After many years, Naraka has finally arrived in Samsara (once ReMixer 2.0 arrives)!
#include "Naraka.acs"

Script "ReMixerInit" OPEN //667
{
	totalMonsters = GetLevelInfo(LEVELINFO_TOTAL_MONSTERS);

	alreadyshowedbs = 1;
	Delay(1);
	addonsProcessed = 1;
	Delay(4);

	// We should check for iwads and TCs that can be loaded with Reincarnation, but not with ReMixer
	int incompatibilityReMixerTid = UniqueTid();

	// Check if Strife have been loaded
	if (GetCvar("samsara_currentgame") == 16)
	{
		SetFont("CMPSDOOM");
		HudMessage(l:"REMIXER_INCOMPATIBILITY_1"; HUDMSG_TYPEON | HUDMSG_LOG, 0, CR_WHITE, 1.5, 0.8, 5.0, 0.05, 2.0);
	}

	Thing_Remove(incompatibilityReMixerTid);
}

Script "ReMixerSpawnScript" (int spawncode, int override, int monsterSlot) //668
{
	int map;
	int setselect;
	int multitoken;
	int gameTypeMap;
	int numGameTypes = 0;
	int altSetSelect;

	// Check for Lexicon compatibility
	int isLexiconEnabled = 0;
	int LexiconTid = UniqueTid();

	if(SpawnForced("IKPuff",0,0,0,LexiconTid))
	{
		Thing_Remove(LexiconTid);
		isLexiconEnabled = 1;
	}

	map = GetLevelInfo(LEVELINFO_LEVELNUM);

	Switch(spawncode)
	{
		case 1:
			if(GetCVar("samsara_runninginzdoom"))
				SetActorFlag(0,"INTERPOLATEANGLES",1);
			/*
				if(SpawnForced("StrongHoldLoaded",0,0,0,0))
					ACS_NamedExecuteWithResult("Samsara_MonsterSpawn",0,0,0,0); //uncomment this for stronghold support, will deal with later
			*/

			int useSkill = GetCVar("mm_skilloverride");
			multitoken = useSkill < 5 ? useSkill : GameSkill();
			GiveInventory("DifficultyToken", multitoken);

			if(GetCVar("mm_invisiblemode") == 1)
			{
				GiveInventory("InvisibleToken",1);
				SetActorProperty(0,APROP_Alpha,0);
			}

			if(GetCVar("mm_dropmode") == 1)
			{
				GiveInventory("WeaponDropToken", 1);
			}

			if(GetCVar("mm_multiply") > 1 && !CheckInventory("MultiplyOverflowToken"))
			{
				int activator = ActivatorTid();
				int newtid = UniqueTid();
				for(int g = 1; g < GetCVar("mm_multiply"); g++)
				{
					SpawnForced(GetActorClass(activator),GetActorX(activator),GetActorY(activator),GetActorZ(activator),newtid,0);
					SetActorAngle(newtid,GetActorAngle(activator));
					GiveActorInventory(newtid, "MultiplyOverflowToken", 1);
					GiveActorInventory(newtid, "ThruSpeciesToken", 1);
					SetActorProperty(newtid,APROP_Species,GetActorClass(activator));
					SetActorProperty(activator,APROP_Species,GetActorClass(activator));
					GiveActorInventory(activator, "ThruSpeciesToken", 1);
					ThrustThing(random(0,256), 2, 0, newtid);
					Thing_ChangeTid(newtid, activator);
				}
				break;
			}
			break;

		case 2:
			until(pickClear && (SinglePlayer() || timer() > 5) && PlayerCount() > 0)
				Delay(1);

			if(maxSetsEnabled == 0)
			{
				SetActorState(0,"SetNull",true);
				terminate;
			}

			setselect = random(1, maxSetsEnabled) - 1;

			switch(pickFromSets[setselect])
			{
				//All other sets
				default:
					//SetActorState(0,gameSetsStr[pickFromSets[setselect]],true);
					break;

				case 0: // Doom
					int doomMode = GetCVar("mm_doommode");

					switch(doomMode)
					{
						default:
							altSetSelect = doomMode-1;
							break;

						case 0:
							while(amountOfGameTypes[pickFromSets[setselect]] != 0)
							{
								altSetSelect = random(0,maxAltSets);
								if(amountOfGameTypes[pickFromSets[setselect]] & 1<<altSetSelect)
									break;
							}

							switch(altSetSelect)
							{
								default:
								case 0:
									altSetSelect = GetCVar("mm_doomspawns") * 2;
									break;

								case 1:
									altSetSelect = 1 + GetCVar("mm_doom64spawns") * 2;
									break;
							}
							break;

						case 1:
							altSetSelect = GetCVar("mm_doomspawns") * 2;
							break;

						case 2:
							altSetSelect = 1 + GetCVar("mm_doom64spawns") * 2;
							break;

						case 3:
							switch(random(0,1))
							{
								default:
								case 0:
									altSetSelect = GetCVar("mm_doomspawns") * 2;
									break;

								case 1:
									altSetSelect = 1 + GetCVar("mm_doom64spawns") * 2;
									break;
							}

							break;
					}
					break;
				case 3: // Wolf3d
					int wolfMode = GetCVar("mm_wolfmode");

					switch(wolfMode)
					{
						default:
							altSetSelect = wolfMode-1;
							break;

						case 0: //doing this one the crude way
							while(amountOfGameTypes[pickFromSets[setselect]] != 0)
							{
								altSetSelect = random(0,maxAltSets);
								if(amountOfGameTypes[pickFromSets[setselect]] & 1<<altSetSelect)
									break;
							}
							break;

						case 4:
							altSetSelect = random(0,1);
							break;

						case 5:
							altSetSelect = random(0,2);
							break;
					}
					break;

				case 5:
					int dukeMode = GetCVar("mm_dukemode");

					switch(dukeMode)
					{
						default:
							altSetSelect = dukeMode-1;
							break;

						case 0:
							while(amountOfGameTypes[pickFromSets[setselect]] != 0)
							{
								altSetSelect = random(0,maxAltSets);
								if(amountOfGameTypes[pickFromSets[setselect]] & 1<<altSetSelect)
									break;
							}
							break;

						case 3:
							altSetSelect = random(0,1);
							break;
					}
					break;

				case 19:
					int halfLifeMode = GetCVar("mm_halflifemode");

					switch(halfLifeMode)
					{
						default:
							altSetSelect = halfLifeMode-1;
							break;

						case 0:
							while(amountOfGameTypes[pickFromSets[setselect]] != 0)
							{
								altSetSelect = random(0,maxAltSets);
								if(amountOfGameTypes[pickFromSets[setselect]] & 1<<altSetSelect)
									break;
							}
							break;
					}
					break;
			}

			if(GetCVar("mm_reducemonsters") < 99)
			{
				until(processedCounts) { Delay(1); }

				if(isLexiconEnabled == 1)
				{
					Delay(1);
				}

				if(ACS_NamedExecuteWithResult("SMMReducer",gamePruneValues[pickFromSets[setselect]][altSetSelect],CheckFlag(0,"BOSSDEATH"),monsterSlot))
				{
					Thing_Remove(0);
					terminate;
				}
			}
			ACS_NamedExecuteWithResult("ReMixer_PickActor",pickFromSets[setselect],altSetSelect,monsterSlot);
			SetActorState(0,"Continue",1);
			break;

		case 3:
			if(GetCVar("mm_multiply") > 1)
			{
				multitoken = GetCVar("mm_multiply");
				GiveInventory("MultiplyToken", multitoken);
			}
			break;

		case 4:
			if(GetCVar("mm_dropmode") == 1)
			{
				GiveInventory("WeaponDropToken", 1);
			}

			break;
	}
}

Script "ReMixer_PickActor" (int monGame, int monAlt, int monSlot)
{
	if (GetCVar("sv_nomonsters")) { terminate; }

	int oldSpawnerTid = ActivatorTid();
	int newSpawnerTid = UniqueTid();
	int newMonTid = UniqueTid();
	int pick, maxPick;
	int totalChance, currentChance;
	int useSkill = GetCVar("mm_skilloverride");
	int pickAddon = 0, addonOffsetGame, addonOffsetAltGame, addonOffsetMonSlot, addonPickOffset;
	int a = 0, newChance = 0, oldChance = 0;
	int skillMod = ((GameSkill() * !useSkill) + ((useSkill > 0) * (useSkill - 1))) * 3;

	Thing_ChangeTid(0,newSpawnerTid);

	if(monGame >= MAX_GAME_TYPES)
	{
		pickAddon = 1;
		monGame -= MAX_GAME_TYPES;
	}

	if(!pickAddon)
	{
		for(a = 0; a < MAXPERSLOT; a++)
		{
			if(monsterSelectStat[monGame][monAlt][monSlot][a][skillMod+2] == 0)
				totalChance += 1;
			else if(monsterSelectStat[monGame][monAlt][monSlot][a][skillMod+2] > 0)
				totalChance += monsterSelectStat[monGame][monAlt][monSlot][a][skillMod+2];

			if(strlen(monsterSelectStr[monGame][monAlt][monSlot][a+1][0])==0)
			{
				maxPick = a;
				break;
			}
		}
	}
	else
	{
		addonOffsetGame = monGame * MAX_ALTS * MONSTER_SLOT * MAXPERSLOT * 6;
		addonOffsetAltGame = monAlt * MONSTER_SLOT * MAXPERSLOT * 6;
		addonOffsetMonSlot = monSlot * MAXPERSLOT * 6;
		for(a = 0; a < MAXPERSLOT; a++)
		{
			if(addonSetStats[(addonOffsetGame+addonOffsetAltGame+addonOffsetMonSlot+a*1)+skillMod+2] == 0)
				totalChance += 1;
			else if(addonSetStats[(addonOffsetGame+addonOffsetAltGame+addonOffsetMonSlot+a*1)+skillMod+2] > 0)
				totalChance += addonSetStats[(addonOffsetGame+addonOffsetAltGame+addonOffsetMonSlot+a*1)+skillMod+2];

			if(strlen(addonSets[(addonOffsetGame+addonOffsetAltGame+addonOffsetMonSlot+a*1)])==0)
			{
				maxPick = a;
				break;
			}
		}
	}

	if(maxPick > 0)
	{
		int choose = random(1,totalChance);
		for(a = 0; a <= maxPick; a++)
		{
			if(!pickAddon)
			{
				newChance = monsterSelectStat[monGame][monAlt][monSlot][a][skillMod+2];
				if(newChance == 0) newChance = 1;
				else if(newChance < 0) continue;
				if(a > 0)
				{
					oldChance = monsterSelectStat[monGame][monAlt][monSlot][a-1][skillMod+2];
					if(choose <= (currentChance + newChance) && choose > currentChance)
					{
						pick = a;
						break;
					}
					else
						currentChance += newChance;
				}
				else
				{
					if(choose <= newChance)
						pick = a;
				}
			}
			else
			{
				newChance = addonSetStats[addonOffsetGame+addonOffsetAltGame+addonOffsetMonSlot+(a*6)+skillMod+2];
				if(newChance == 0) newChance = 1;
				else if(newChance < 0) continue;
				if(a > 0)
				{
					oldChance = addonSetStats[addonOffsetGame+addonOffsetAltGame+addonOffsetMonSlot+((a-1)*6)+skillMod+2];
					if(choose <= (currentChance + newChance) && choose > currentChance)
					{
						pick = a;
						break;
					}
					else
						currentChance += newChance;
				}
				else
				{
					if(choose <= newChance)
						pick = a;
				}
				addonPickOffset = pick * 6;
			}
		}
	}

	int speed = pickAddon ? addonSetStats[addonOffsetGame+addonOffsetAltGame+addonOffsetMonSlot+addonPickOffset+skillMod] : monsterSelectStat[monGame][monAlt][monSlot][pick][skillMod];
	int health = pickAddon ? addonSetStats[addonOffsetGame+addonOffsetAltGame+addonOffsetMonSlot+addonPickOffset+skillMod+1] : monsterSelectStat[monGame][monAlt][monSlot][pick][skillMod+1];
	str token = pickAddon ? addonSetStats[addonOffsetGame+addonOffsetAltGame+addonOffsetMonSlot+addonPickOffset+(1+(skillMod/3))] : monsterSelectStr[monGame][monAlt][monSlot][pick][1+(skillMod/3)];
	str monster = pickAddon ? addonSets[addonOffsetGame+addonOffsetAltGame+addonOffsetMonSlot] : monsterSelectStr[monGame][monAlt][monSlot][pick][0];

	SpawnForced(monster,GetActorX(0),GetActorY(0),GetActorZ(0),newMonTid);
	SetActorAngle(newMonTid, GetActorAngle(0));

	if(!(monSlot == 6|7|8|9|14|15|16|30|31|37|38|48|51|52|66|67|68|69|70|71))
	{
		SetActivator(newSpawnerTid,AAPTR_Master);
	}

	SetPointerExt(AAPTR_Master,0,newMonTid);

	SetActivator(newSpawnerTid,AAPTR_Target);
	int alert = SetPointerExt(AAPTR_Target,0,newMonTid);

	SetActivator(newSpawnerTid,AAPTR_Tracer);
	SetPointerExt(AAPTR_Tracer,0,newMonTid);

	SetActivator(newSpawnerTid,AAPTR_Default);
	Thing_ChangeTid(newSpawnerTid,oldSpawnerTid);

	bool ambush = GetUserVariable(0,"user_ambush");
	int userArgs[5] = {
		GetUserArray(0,"user_args",0),
		GetUserArray(0,"user_args",1),
		GetUserArray(0,"user_args",2),
		GetUserArray(0,"user_args",3),
		GetUserArray(0,"user_args",4)
	};

	SetActorProperty(newMonTid,APROP_Ambush,ambush);
	SetThingSpecial(newMonTid,GetUserVariable(0,"user_special"),userArgs[0],userArgs[1],userArgs[2],userArgs[3],userArgs[4]);

	if(GetUserVariable(0,"user_dormant"))
	{
		Thing_Deactivate(newMonTid);
	}
	else if(!ambush && alert)
	{
		ACS_NamedExecuteWithResult("ReMixerAwakenMonster",newMonTid);
	}

	if(speed != 0)
	{
		SetActorProperty(newMonTid,APROP_Speed,FixedMul(GetActorProperty(newMonTid,APROP_Speed),speed));
	}
	if(health != 0)
	{
		SetActorProperty(newMonTid,APROP_Health,FixedMul(GetActorProperty(newMonTid,APROP_Health),health));
	}
	if(strlen(token) != 0)
	{
		GiveActorInventory(newMonTid, token,1);
	}

	Thing_ChangeTid(newMonTid,oldSpawnerTid);
}

Script "ReMixerAwakenMonster" (int monTid)
{
	SetActivator(monTid);

	int seeAttempts = 5;
	until (CheckInventory("AlreadySpawned") || seeAttempts <= 0)
	{
		Delay(1);
		seeAttempts--;
	}

	if (ClassifyActor(0) <= 1)
	{
		terminate;
	}

	SetActorState(0, "See", true);

	if (CheckActorProperty(0, APROP_SeeSound, ""))
	{
		terminate;
	}

	bool isFullVol = CheckFlag(0, "BOSS");
	if (!isFullVol && GetCVar("samsara_runninginzdoom"))
	{
		isFullVol = CheckFlag(0, "FULLVOLSEE");
	}

	int attenuation = isFullVol ? ATTN_NONE : ATTN_NORM;

	PlayActorSound(0, SOUND_See, CHAN_VOICE, 1.0, false, attenuation);
}

Script "ReMixerInvasion" OPEN //670
{
	if(isZDoom())
		terminate;

	int spawnmode, oldmode;
	while(true)
	{
		if(GetInvasionState() == 1 || GetInvasionState() == 5)
		{
			spawnmode = GetCVar("mm_spawnmode");
			if(oldmode != spawnmode)
			{
				ACS_NamedExecuteWithResult("ReMixer_PickSets",0,0,0,0);
			}
		}
		Delay(1);
		oldmode = spawnmode;
	}
}

Script "MarathonTeleport" (void)
{
	if(GetCVar("mm_maratele") == 1)
	{
		GiveInventory("TeleportIn", 1);
	}
}

Script "ReMixerCVarCheck" (int pick) //680
{
	int response;

	Switch (pick)
	{
		case 1:
			response = GetCVar("mm_fakehitlerfire");
			break;

		case 2:
			response = GetCVar("mm_wolffastdeath");
			break;

		case 3:
			int useSkill = GetCVar("mm_skilloverride");
			response = useSkill < 5 ? useSkill : GameSkill();
			break;

		case 4:
			response = GetCVar("mm_dropdefault");
			break;

		case 5:
			response = GetCVar("mm_pinataparty");
			break;

		case 6:
			response = GetCVar("mm_newchex");
			break;

		case 7:
			response = GetCVar("mm_rarespawns");
			break;

		case 8:
			response = GetCVar("mm_invisiblemode");
			break;

		case 9:
			response = GetCVar("mm_fullradiusdmg");
			break;

		case 10:
			response = GetCVar("mm_nobats");
			break;

		case 11:
			response = GetCVar("mm_specpermdeath");
			break;

		case 12:
			if(GetCVar("mm_spawnmode") < 3)
			{
				response = 1;
			}
			break;

		case 13:
			response = GetCVar("mm_performancemode") && (!StrICmp(strparam(l:"CC_CARD_LOCKED"),"Undiscovered Card") == 0);
			break;
	}
	SetResultValue(response);
}

Script "ReMixer_PickSets" (void)
{
	if(monsterProcessing == 1)
		terminate;

	int clients = PlayerCount();
	int usingAddons, bitindex, bitindex2, bitindexa, a, b, p;

	activeSets = 0;
	activeSets2 = 0;
	activeSetsA = 0;
	monsterProcessing = 1;
	pickClear = 0;
	maxSetsEnabled = 0;
	for(a = 0; a < MAX_GAME_TYPES; a++)
	{
		pickFromSets[a] = -1;
		amountOfGameTypes[a] = 0;
	}

	switch(GetCVar("mm_spawnmode"))
	{
		case 0:
			for(p = 0; p < clients; p++)
			{
				if(PlayerInGame(p) == true)
				{
					for(b = 0; b < MAX_GAME_TYPES; b++)
					{
						if(PlayerClass(p) == b)
						{
							if(b >= 32)
							bitindex2 = 1<<b-32;
							else
								bitindex = 1<<b;

							if(!(activesets & bitindex))
							{
								activesets += bitindex;
								pickFromSets[maxSetsEnabled] = b;
								maxSetsEnabled++;
							}
							else if(!(activeSets2 & bitindex2) && b >= 32)
							{
								activeSets2 += bitindex2;
								pickFromSets[maxSetsEnabled] = b;
								maxSetsEnabled++;
							}
							switch(b)
							{
								case 0:
									if(!(amountOfGameTypes[b] & 1<<GetUserCvar(p,"samsara_cl_doommode")))
										amountOfGameTypes[b] += 1<<GetUserCvar(p,"samsara_cl_doommode");
									break;

								case 3:
									if(!(amountOfGameTypes[b] & 1<<GetUserCvar(p,"samsara_cl_wolfmode")))
										amountOfGameTypes[b] += 1<<GetUserCvar(p,"samsara_cl_wolfmode");
									break;

								case 5:
									if(!(amountOfGameTypes[b] & 1<<GetUserCvar(p,"samsara_cl_dukemode")))
										amountOfGameTypes[b] += 1<<GetUserCvar(p,"samsara_cl_dukemode");
									break;

								case 19:
									if(!(amountOfGameTypes[b] & 1<<GetUserCvar(p,"samsara_cl_shephardmode")))
										amountOfGameTypes[b] += 1<<GetUserCvar(p,"samsara_cl_shephardmode");
									break;
							}
						}
					}
				}
				else
				{
					clients++;
				}
			}
			break;

		case 1:
			for(b = 0; b < MAX_GAME_TYPES; b++)
			{
				str gameTypeMap = strparam(s:gameTypesStr[b], d:GetLevelInfo(LEVELINFO_LEVELNUM));;

				if(GetCVar(gameTypeMap))
				{
					if(usingAddons)
						bitindexa = 1<<(b-MAX_GAME_TYPES);
					else if(b >= 32)
						bitindex2 = 1<<b-32;
					else
						bitindex = 1<<b;

					if(usingAddons)
					{
						if(!(activesetsA & bitindexa))
						{
							activesetsA += bitindexa;
							pickFromSets[maxSetsEnabled] = b;
							maxSetsEnabled++;
						}
					}
					else
					{
						if(!(activesets & bitindex))
						{
							activesets += bitindex;
							pickFromSets[maxSetsEnabled] = b;
							maxSetsEnabled++;
						}
						else if(!(activeSets2 & bitindex2))
						{
							activeSets2 += bitindex2;
							pickFromSets[maxSetsEnabled] = b;
							maxSetsEnabled++;
						}
					}
					if(PlayerClass(p) == b && PlayerInGame(p))
					{
						switch(b)
						{
							case 0:
								if(!(amountOfGameTypes[b] & 1<<GetUserCvar(p,"samsara_cl_doommode")))
									amountOfGameTypes[b] += 1<<GetUserCvar(p,"samsara_cl_doommode");
								break;

							case 3:
								if(!(amountOfGameTypes[b] & 1<<GetUserCvar(p,"samsara_cl_wolfmode")))
									amountOfGameTypes[b] += 1<<GetUserCvar(p,"samsara_cl_wolfmode");
								break;

							case 5:
								if(!(amountOfGameTypes[b] & 1<<GetUserCvar(p,"samsara_cl_dukemode")))
									amountOfGameTypes[b] += 1<<GetUserCvar(p,"samsara_cl_dukemode");
								break;

							case 19:
								if(!(amountOfGameTypes[b] & 1<<GetUserCvar(p,"samsara_cl_shephardmode")))
									amountOfGameTypes[b] += 1<<GetUserCvar(p,"samsara_cl_shephardmode");
								break;
						}
					}
				}
			}
			break;

		case 2:
			for(b = 0; b < MAX_GAME_TYPES+addonCounter; b++)
			{
				usingAddons = b >= MAX_GAME_TYPES;
				if(usingAddons ? addonCVARs[b-MAX_GAME_TYPES] : GetCVar(gameTypesStr[b]))
				{
					if(usingAddons)
						bitindexa = 1<<(b-MAX_GAME_TYPES);
					else if(b >= 32)
						bitindex2 = 1<<b-32;
					else
						bitindex = 1<<b;

					if(usingAddons)
					{
						if(!(activesetsA & bitindexa))
						{
							activesetsA += bitindexa;
							pickFromSets[maxSetsEnabled] = b;
							maxSetsEnabled++;
						}
					}
					else
					{
						if(!(activesets & bitindex))
						{
							activesets += bitindex;
							pickFromSets[maxSetsEnabled] = b;
							maxSetsEnabled++;
						}
						else if(!(activeSets2 & bitindex2))
						{
							activeSets2 += bitindex2;
							pickFromSets[maxSetsEnabled] = b;
							maxSetsEnabled++;
						}
					}
					if(PlayerClass(p) == b && PlayerInGame(p))
					{
						switch(b)
						{
							case 0:
								if(!(amountOfGameTypes[b] & 1<<GetUserCvar(p,"samsara_cl_doommode")))
									amountOfGameTypes[b] += 1<<GetUserCvar(p,"samsara_cl_doommode");
								break;

							case 3:
								if(!(amountOfGameTypes[b] & 1<<GetUserCvar(p,"samsara_cl_wolfmode")))
									amountOfGameTypes[b] += 1<<GetUserCvar(p,"samsara_cl_wolfmode");
								break;

							case 5:
								if(!(amountOfGameTypes[b] & 1<<GetUserCvar(p,"samsara_cl_dukemode")))
									amountOfGameTypes[b] += 1<<GetUserCvar(p,"samsara_cl_dukemode");
								break;

							case 19:
								if(!(amountOfGameTypes[b] & 1<<GetUserCvar(p,"samsara_cl_shephardmode")))
									amountOfGameTypes[b] += 1<<GetUserCvar(p,"samsara_cl_shephardmode");
								break;
						}
					}
				}
			}
			break;

		case 3:
			int selectloop = 0;
			int randomvalue = GetCVar("mm_randomcycle");
			int randnum;
			int erroramount = 0;
			int randombit, randombit2, randombita;
			int randomtotal, randomtotal2, randomtotala;

			While (selectloop < randomvalue)
			{
				randombit = 0;
				randombit2 = 0;
				randombita = 0;
				randnum = random(0, MAX_GAME_TYPES+MAX_ADDON_SETS-1);
				usingAddons = randnum >= MAX_GAME_TYPES;
				if(!usingAddons)
				{
					if(randnum >= 32)
					{
						randombit2 = 1;
						randombit2 = randombit2<<randnum-32;
					}
					else
					{
						randombit = 1;
						randombit = randombit2<<randnum;
					}
				}
				else
				{
					randombita = 1;
					randombita = randombita<<randnum-MAX_GAME_TYPES;
				}

				if(usingAddons ? !GetCVar(addonCVARs[randnum-MAX_GAME_TYPES]) : !GetCVar(gameTypesStr[randnum])||((randomtotal & randombit) && (randomtotal2 & randombit2) && (randomtotala & randombita))) { if(erroramount > 256){ selectloop = randnum; break; } else{erroramount++;} }
				else
				{
					pickFromSets[maxSetsEnabled] = randnum;
					maxSetsEnabled++;
					selectloop++;
					erroramount = 0;
					randomtotal += randombit;
					randomtotal2 += randombit2;
					randomtotala += randombita;

					if(PlayerClass(p) == randnum && PlayerInGame(p))
					{
						switch(randnum)
						{
							case 0:
								if(!(amountOfGameTypes[randnum] & 1<<GetUserCvar(p,"samsara_cl_doommode")))
									amountOfGameTypes[randnum] += 1<<GetUserCvar(p,"samsara_cl_doommode");
								break;

							case 3:
								if(!(amountOfGameTypes[randnum] & 1<<GetUserCvar(p,"samsara_cl_wolfmode")))
									amountOfGameTypes[randnum] += 1<<GetUserCvar(p,"samsara_cl_wolfmode");
								break;

							case 5:
								if(!(amountOfGameTypes[randnum] & 1<<GetUserCvar(p,"samsara_cl_dukemode")))
									amountOfGameTypes[randnum] += 1<<GetUserCvar(p,"samsara_cl_dukemode");
								break;

							case 19:
								if(!(amountOfGameTypes[randnum] & 1<<GetUserCvar(p,"samsara_cl_shephardmode")))
									amountOfGameTypes[randnum] += 1<<GetUserCvar(p,"samsara_cl_shephardmode");
								break;
						}
					}
				}
			}
			break;
	}
	//Call this manually. I prefer this to be done right away instead of after 1 tic.
	/*if(activesets & (1 << 30))
		ACS_NamedExecuteWithResult("RTCWPartsCacher");*/
	pickClear = 1;
	monsterProcessing = 0;
}

//Script "ReMixer_PickSets_OPEN" Open { ACS_NamedExecuteWithResult("ReMixer_PickSets",0,0,0,0); }
Script "ReMixer_PickSets_RESPAWN" RESPAWN { ACS_NamedExecuteWithResult("ReMixer_PickSets",0,0,0,0); }
//Script "ReMixer_PickSets_REOPEN" REOPEN { ACS_NamedExecuteWithResult("ReMixer_PickSets",0,0,0,0); }
Script "ReMixer_PickSets_ENTER" ENTER { ACS_NamedExecuteWithResult("ReMixer_PickSets",0,0,0,0);}
Script "ReMixer_PickSets_DISCONNECT" (int player) DISCONNECT { ACS_NamedExecuteWithResult("ReMixer_PickSets",0,0,0,0); }

Script "RemixerInvasionChecker" (void)
{
	if(isZDoom()) { SetResultValue(0); terminate; }
	SetResultValue(GetInvasionState() != -1);
}

#DEFINE maxPinataCommonQuality 9
#DEFINE maxPinataUncommonQuality 17
#DEFINE maxPinataRareQuality 19
#DEFINE maxPinataEpicQuality 15
#DEFINE maxPinataLegendaryQuality 9

str PinataDoomCommonQuality[maxPinataCommonQuality] = { "Ammo1Small", "Ammo2Small", "HealPack0", "ArmorBonusPickup", "HealPack1", "Ammo1Big", "Ammo2Big", "SamsaraSlotTwoDrop", "SamsaraSlotFourDrop" };
str PinataDoomUncommonQuality[maxPinataUncommonQuality] = { "Ammo3Small", "Ammo4Small", "HealPack1", "Ammo1Big", "Ammo2Big", "HealPack2", "SuperHealth2", "PartialInvisibility", "SamsaraSlotOneDrop", "SamsaraSlotTwoDrop", "SamsaraSlotFourDrop", "SamsaraSlotThreeDrop", "Ammo1Small", "Ammo2Small", "GreenArmorPickup", "AmmoBackpack", "SamsaraUniquePickup" };
str PinataDoomRareQuality[maxPinataRareQuality] = { "Ammo1Big", "Ammo2Big", "HealthPack2", "SamsaraSlotOneDrop", "SamsaraSlotThreeDrop", "SamsaraSlotFourDrop", "Ammo3Big", "Ammo4Big", "SamsaraSlotFiveDrop", "SamsaraSlotSixDrop", "AmmoBackpack", "SuperHealth2", "BlueArmorPickup", "Ammo3Small", "Ammo4Small", "Megapack", "PartialInvisibility", "SamsaraSlotFourSkulltagDrop", "SamsaraUniquePickup" };
str PinataDoomEpicQuality[maxPinataEpicQuality] = { "AmmoBackpack", "SuperHealth2", "BlueArmorPickup", "Ammo3Big", "Ammo4Big", "SamsaraUniquePickup", "SamsaraSlotFiveDrop", "SamsaraSlotSixDrop", "Megapack", "SamsaraSlotSevenDrop", "Ammo1Big", "Ammo2Big", "SamsaraSlotFiveSkulltagDrop", "SamsaraSlotSixSkulltagDrop", "SamsaraSlotFourSkulltagDrop" };
str PinataDoomLegendaryQuality[maxPinataLegendaryQuality] = { "AmmoBackpack", "Megapack", "SamsaraUniquePickup", "SamsaraSlotSevenDrop", "Ammo1Big", "Ammo2Big", "Ammo3Big", "Ammo4Big", "SamsaraSlotSevenSkulltagDrop" };

//f me
int PinataDoomCommonQualityInt[maxPinataCommonQuality] = { 50, 50, 50, 50, 25, 10, 10, 5, 5 };
int PinataDoomUncommonQualityInt[maxPinataUncommonQuality] = { 50, 50, 50, 25, 25, 10, 10, 10, 15, 15, 10, 10, 10, 10, 10, 5, 5 };
int PinataDoomRareQualityInt[maxPinataRareQuality] = { 50, 50, 30, 30, 30, 30, 25, 25, 15, 15, 10, 10, 10, 10, 10, 5, 5, 10, 10 };
int PinataDoomEpicQualityInt[maxPinataEpicQuality] = { 50, 50, 50, 50, 50, 30, 30, 30, 25, 10, 5, 5, 10, 10, 20 };
int PinataDoomLegendaryQualityInt[maxPinataLegendaryQuality] = { 100, 100, 100, 100, 100, 100, 100, 100, 100 };

Script "Samsara_PinataHandler" (int health, int radius, int height, int friendly)
{
	if(!GetCVar("mm_pinataparty"))
		terminate;

	int spawneditems, randomchance, randomitem;
	int newtid = UniqueTid();
	int maxitems = ((height*4)*(radius*radius))/4096;
	if(GetActorProperty(0,APROP_MASS) == 2 && GetCVar("samsara_merrychristmas"))
	{
		While(spawneditems < maxitems)
		{
			SpawnForced("SamsaraXmasCoal",GetActorX(0),GetActorY(0),GetActorZ(0),newtid,0);
			ThrustThing(random(0,256),2,0,newtid);
			ThrustThingZ(newtid,random(17,35),0,1);
			Thing_ChangeTid(newtid,0);
			spawneditems++;
		}
	}
	else if(health < 200)
	{
		While(spawneditems < maxitems)
		{
			randomchance = random(0,100);
			randomitem = random(0,maxPinataCommonQuality-1);
			if(randomchance < PinataDoomCommonQualityInt[randomitem])
			{
				SpawnForced(PinataDoomCommonQuality[randomitem],GetActorX(0),GetActorY(0),GetActorZ(0),newtid,0);
				ThrustThing(random(0,256),2,0,newtid);
				ThrustThingZ(newtid,random(17,35),0,1);
				Thing_ChangeTid(newtid,0);
				spawneditems++;
			}
		}
	}
	else if(health < 1000)
	{
		While(spawneditems < maxitems)
		{
			randomchance = random(0,100);
			randomitem = random(0,maxPinataUncommonQuality-1);
			if(randomchance < PinataDoomUncommonQualityInt[randomitem])
			{
				SpawnForced(PinataDoomUncommonQuality[randomitem],GetActorX(0),GetActorY(0),GetActorZ(0),newtid,0);
				ThrustThing(random(0,256),2,0,newtid);
				ThrustThingZ(newtid,random(17,35),0,1);
				Thing_ChangeTid(newtid,0);
				spawneditems++;
			}
		}
	}
	else if(health < 2500)
	{
		While(spawneditems < maxitems)
		{
			randomchance = random(0,100);
			randomitem = random(0,maxPinataRareQuality-1);
			if(randomchance < PinataDoomRareQualityInt[randomitem])
			{
				SpawnForced(PinataDoomRareQuality[randomitem],GetActorX(0),GetActorY(0),GetActorZ(0),newtid,0);
				ThrustThing(random(0,256),2,0,newtid);
				ThrustThingZ(newtid,random(17,35),0,1);
				Thing_ChangeTid(newtid,0);
				spawneditems++;
			}
		}
	}
	else if(health < 5000)
	{
		While(spawneditems < maxitems)
		{
			randomchance = random(0,100);
			randomitem = random(0,maxPinataEpicQuality-1);
			if(randomchance < PinataDoomEpicQualityInt[randomitem])
			{
				SpawnForced(PinataDoomEpicQuality[randomitem],GetActorX(0),GetActorY(0),GetActorZ(0),newtid,0);
				ThrustThing(random(0,256),2,0,newtid);
				ThrustThingZ(newtid,random(17,35),0,1);
				Thing_ChangeTid(newtid,0);
				spawneditems++;
			}
		}
	}
	else
	{
		While(spawneditems < maxitems)
		{
			randomchance = random(0,100);
			randomitem = random(0,maxPinataLegendaryQuality-1);
			if(randomchance < PinataDoomLegendaryQualityInt[randomitem])
			{
				if(SpawnForced(PinataDoomLegendaryQuality[randomitem],GetActorX(0),GetActorY(0),GetActorZ(0),newtid,0))
				{
					GiveActorInventory(newtid,"GravityToken",1);
					ThrustThing(random(0,256),2,0,newtid);
					ThrustThingZ(newtid,random(17,35),0,1);
					Thing_ChangeTid(newtid,0);
					spawneditems++;
				}
			}
		}
	}
}

Script "HeresiarchScriptTokens" (void) { SetResultValue(CheckInventory("HeresiarchScriptTokens")); }

script "ReMixerPresetSelection" (void)
{
	switch(GetCVar("mm_presetvalue"))
	{
		case 0: // Vanilla

		// General Options
		SetCVar("mm_invisiblemode", false);
		SetCVar("mm_pinataparty", false);
		SetCVar("mm_performancemode", true);

		// Monster Spawning Options
		SetCVar("mm_skilloverride", 1);
		SetCVar("mm_spawnmode", 0);
		SetCVar("mm_randomcycle", 1);
		SetCVar("mm_dropmode", 0);
		SetCVar("mm_multiply", 1);
		SetCVar("mm_generate", 0);
		SetCVar("mm_reducemonsters", 99);

		// Monster Specific Options
		SetCVar("mm_specpermdeath", false);
		SetCVar("mm_wolffastdeath", false);
		SetCVar("mm_fakehitlerfire", false);
		SetCVar("mm_fullradiusdmg", false);
		SetCVar("mm_redneckcusspack", 0);

		// Enemy Modes
		SetCVar("mm_doommode", 1);
		SetCVar("mm_wolfmode", 1);
		SetCVar("mm_dukemode", 1);
		SetCVar("mm_halflifemode", 1);

		// Enemy Spawns
		SetCVar("mm_doomspawns", 0);
		SetCVar("mm_doom64spawns", 0);

		// ReMixer Spawn Options
		SetCVar("mm_doom", 1);
		SetCVar("mm_chex", 1);
		SetCVar("mm_heretic", 1);
		SetCVar("mm_hexen1", 1);
		SetCVar("mm_wolf3d", 1);
		SetCVar("mm_duke3d", 1);
		SetCVar("mm_marathon", 1);
		SetCVar("mm_quake1", 1);
		SetCVar("mm_rott", 1);
		SetCVar("mm_bstone", 1);
		SetCVar("mm_blood", 1);
		SetCVar("mm_strife", 1);
		SetCVar("mm_erad", 1);
		SetCVar("mm_c7", 1);
		SetCVar("mm_rmr", 1);
		SetCVar("mm_darkf", 1);
		SetCVar("mm_ipog", 1);
		SetCVar("mm_disrup", 1);
		SetCVar("mm_witch", 1);
		SetCVar("mm_halflife", 1);
		SetCVar("mm_sw", 1);
		SetCVar("mm_cm", 1);
		SetCVar("mm_ps", 1);
		SetCVar("mm_rr", 1);
		SetCVar("mm_quake2", 1);
		SetCVar("mm_hexen2", 1);
		SetCVar("mm_goldeneye", 1);
		SetCVar("mm_catacomb", 1);
		SetCVar("mm_painkiller", 1);
		SetCVar("mm_unreal", 1);
		SetCVar("mm_rtcw", 1);
		SetCVar("mm_quake3", 1);
		SetCVar("mm_descent", 1);
		SetCVar("mm_deusex", 1);
		break;

		case 1: // Samsara

		// General Options
		SetCVar("mm_invisiblemode", false);
		SetCVar("mm_pinataparty", false);
		SetCVar("mm_performancemode", true);

		// Monster Spawning Options
		SetCVar("mm_skilloverride", 0);
		SetCVar("mm_spawnmode", 0);
		SetCVar("mm_randomcycle", 1);
		SetCVar("mm_dropmode", 0);
		SetCVar("mm_multiply", 1);
		SetCVar("mm_generate", 0);
		SetCVar("mm_reducemonsters", 99);

		// Monster Specific Options
		SetCVar("mm_specpermdeath", true);
		SetCVar("mm_wolffastdeath", false);
		SetCVar("mm_fakehitlerfire", true);
		SetCVar("mm_fullradiusdmg", true);
		SetCVar("mm_redneckcusspack", 0);

		// Enemy Modes
		SetCVar("mm_doommode", 0);
		SetCVar("mm_wolfmode", 0);
		SetCVar("mm_dukemode", 0);
		SetCVar("mm_halflifemode", 0);

		// Enemy Spawns
		SetCVar("mm_doomspawns", 0);
		SetCVar("mm_doom64spawns", 0);

		// ReMixer Spawn Options
		SetCVar("mm_doom", 1);
		SetCVar("mm_chex", 1);
		SetCVar("mm_heretic", 1);
		SetCVar("mm_hexen1", 1);
		SetCVar("mm_wolf3d", 1);
		SetCVar("mm_duke3d", 1);
		SetCVar("mm_marathon", 1);
		SetCVar("mm_quake1", 1);
		SetCVar("mm_rott", 1);
		SetCVar("mm_bstone", 1);
		SetCVar("mm_blood", 1);
		SetCVar("mm_strife", 1);
		SetCVar("mm_erad", 1);
		SetCVar("mm_c7", 1);
		SetCVar("mm_rmr", 1);
		SetCVar("mm_darkf", 1);
		SetCVar("mm_ipog", 1);
		SetCVar("mm_disrup", 1);
		SetCVar("mm_witch", 1);
		SetCVar("mm_halflife", 1);
		SetCVar("mm_sw", 1);
		SetCVar("mm_cm", 1);
		SetCVar("mm_ps", 1);
		SetCVar("mm_rr", 1);
		SetCVar("mm_quake2", 1);
		SetCVar("mm_hexen2", 1);
		SetCVar("mm_goldeneye", 1);
		SetCVar("mm_catacomb", 1);
		SetCVar("mm_painkiller", 1);
		SetCVar("mm_unreal", 1);
		SetCVar("mm_rtcw", 1);
		SetCVar("mm_quake3", 1);
		SetCVar("mm_descent", 1);
		SetCVar("mm_deusex", 1);
		break;

		case 2: // Samsara Reincarnation

		// General Options
		SetCVar("mm_invisiblemode", false);
		SetCVar("mm_pinataparty", false);
		SetCVar("mm_performancemode", true);

		// Monster Spawning Options
		SetCVar("mm_skilloverride", 0);
		SetCVar("mm_spawnmode", 0);
		SetCVar("mm_randomcycle", 1);
		SetCVar("mm_dropmode", 1);
		SetCVar("mm_multiply", 1);
		SetCVar("mm_generate", 0);
		SetCVar("mm_reducemonsters", 0);

		// Monster Specific Options
		SetCVar("mm_specpermdeath", true);
		SetCVar("mm_wolffastdeath", false);
		SetCVar("mm_fakehitlerfire", true);
		SetCVar("mm_fullradiusdmg", true);
		SetCVar("mm_redneckcusspack", 0);

		// Enemy Modes
		SetCVar("mm_doommode", 0);
		SetCVar("mm_wolfmode", 0);
		SetCVar("mm_dukemode", 0);
		SetCVar("mm_halflifemode", 0);

		// Enemy Spawns
		SetCVar("mm_doomspawns", 1);
		SetCVar("mm_doom64spawns", 1);

		// ReMixer Spawn Options
		SetCVar("mm_doom", 1);
		SetCVar("mm_chex", 1);
		SetCVar("mm_heretic", 1);
		SetCVar("mm_hexen1", 1);
		SetCVar("mm_wolf3d", 1);
		SetCVar("mm_duke3d", 1);
		SetCVar("mm_marathon", 1);
		SetCVar("mm_quake1", 1);
		SetCVar("mm_rott", 1);
		SetCVar("mm_bstone", 1);
		SetCVar("mm_blood", 1);
		SetCVar("mm_strife", 1);
		SetCVar("mm_erad", 1);
		SetCVar("mm_c7", 1);
		SetCVar("mm_rmr", 1);
		SetCVar("mm_darkf", 1);
		SetCVar("mm_ipog", 1);
		SetCVar("mm_disrup", 1);
		SetCVar("mm_witch", 1);
		SetCVar("mm_halflife", 1);
		SetCVar("mm_sw", 1);
		SetCVar("mm_cm", 1);
		SetCVar("mm_ps", 1);
		SetCVar("mm_rr", 1);
		SetCVar("mm_quake2", 1);
		SetCVar("mm_hexen2", 1);
		SetCVar("mm_goldeneye", 1);
		SetCVar("mm_catacomb", 1);
		SetCVar("mm_painkiller", 1);
		SetCVar("mm_unreal", 1);
		SetCVar("mm_rtcw", 1);
		SetCVar("mm_quake3", 1);
		SetCVar("mm_descent", 1);
		SetCVar("mm_deusex", 1);
		break;

		// Secret presets
		case 100: // cubebert's Settings

		// General Options
		SetCVar("mm_invisiblemode", false);
		SetCVar("mm_pinataparty", false);
		SetCVar("mm_performancemode", false);

		// Monster Spawning Options
		SetCVar("mm_skilloverride", 1);
		SetCVar("mm_spawnmode", 2);
		SetCVar("mm_randomcycle", 1);
		SetCVar("mm_dropmode", 1);
		SetCVar("mm_multiply", 1);
		SetCVar("mm_generate", 0);
		SetCVar("mm_reducemonsters", 99);

		// Monster Specific Options
		SetCVar("mm_specpermdeath", true);
		SetCVar("mm_wolffastdeath", false);
		SetCVar("mm_fakehitlerfire", true);
		SetCVar("mm_fullradiusdmg", true);
		SetCVar("mm_redneckcusspack", 0);

		// Enemy Modes
		SetCVar("mm_doommode", 1);
		SetCVar("mm_wolfmode", 4);
		SetCVar("mm_dukemode", 1);
		SetCVar("mm_halflifemode", 1);

		// Enemy Spawns
		SetCVar("mm_doomspawns", 0);
		SetCVar("mm_doom64spawns", 0);

		// ReMixer Spawn Options
		SetCVar("mm_doom", 1);
		SetCVar("mm_chex", 0);
		SetCVar("mm_heretic", 0);
		SetCVar("mm_hexen1", 0);
		SetCVar("mm_wolf3d", 0);
		SetCVar("mm_duke3d", 0);
		SetCVar("mm_marathon", 0);
		SetCVar("mm_quake1", 0);
		SetCVar("mm_rott", 0);
		SetCVar("mm_bstone", 0);
		SetCVar("mm_blood", 0);
		SetCVar("mm_strife", 0);
		SetCVar("mm_erad", 0);
		SetCVar("mm_c7", 0);
		SetCVar("mm_rmr", 0);
		SetCVar("mm_darkf", 0);
		SetCVar("mm_ipog", 0);
		SetCVar("mm_disrup", 0);
		SetCVar("mm_witch", 0);
		SetCVar("mm_halflife", 0);
		SetCVar("mm_sw", 0);
		SetCVar("mm_cm", 0);
		SetCVar("mm_ps", 0);
		SetCVar("mm_rr", 0);
		SetCVar("mm_quake2", 0);
		SetCVar("mm_hexen2", 0);
		SetCVar("mm_goldeneye", 0);
		SetCVar("mm_catacomb", 0);
		SetCVar("mm_painkiller", 0);
		SetCVar("mm_unreal", 0);
		SetCVar("mm_rtcw", 0);
		SetCVar("mm_quake3", 0);
		SetCVar("mm_descent", 0);
		SetCVar("mm_deusex", 0);
		break;

		case 101: // Meleemario's Settings

		// General Options
		SetCVar("mm_invisiblemode", false);
		SetCVar("mm_pinataparty", true);
		SetCVar("mm_performancemode", true);

		// Monster Spawning Options
		SetCVar("mm_skilloverride", 0);
		SetCVar("mm_spawnmode", 0);
		SetCVar("mm_randomcycle", 1);
		SetCVar("mm_dropmode", 1);
		SetCVar("mm_multiply", 1);
		SetCVar("mm_generate", 15);
		SetCVar("mm_reducemonsters", 0);

		// Monster Specific Options
		SetCVar("mm_specpermdeath", true);
		SetCVar("mm_wolffastdeath", false);
		SetCVar("mm_fakehitlerfire", true);
		SetCVar("mm_fullradiusdmg", true);
		SetCVar("mm_redneckcusspack", 2);

		// Enemy Modes
		SetCVar("mm_doommode", 1);
		SetCVar("mm_wolfmode", 0);
		SetCVar("mm_dukemode", 0);
		SetCVar("mm_halflifemode", 0);

		// Enemy Spawns
		SetCVar("mm_doomspawns", 1);
		SetCVar("mm_doom64spawns", 1);

		// ReMixer Spawn Options
		SetCVar("mm_doom", 1);
		SetCVar("mm_chex", 1);
		SetCVar("mm_heretic", 1);
		SetCVar("mm_hexen1", 1);
		SetCVar("mm_wolf3d", 1);
		SetCVar("mm_duke3d", 1);
		SetCVar("mm_marathon", 1);
		SetCVar("mm_quake1", 1);
		SetCVar("mm_rott", 1);
		SetCVar("mm_bstone", 1);
		SetCVar("mm_blood", 1);
		SetCVar("mm_strife", 1);
		SetCVar("mm_erad", 1);
		SetCVar("mm_c7", 1);
		SetCVar("mm_rmr", 1);
		SetCVar("mm_darkf", 1);
		SetCVar("mm_ipog", 1);
		SetCVar("mm_disrup", 1);
		SetCVar("mm_witch", 1);
		SetCVar("mm_halflife", 1);
		SetCVar("mm_sw", 1);
		SetCVar("mm_cm", 1);
		SetCVar("mm_ps", 1);
		SetCVar("mm_rr", 1);
		SetCVar("mm_quake2", 1);
		SetCVar("mm_hexen2", 1);
		SetCVar("mm_goldeneye", 1);
		SetCVar("mm_catacomb", 1);
		SetCVar("mm_painkiller", 1);
		SetCVar("mm_unreal", 1);
		SetCVar("mm_rtcw", 1);
		SetCVar("mm_quake3", 1);
		SetCVar("mm_descent", 1);
		SetCVar("mm_deusex", 1);
		break;
	}
}