#library "SMMACS"
#include "zcommon.acs"
#include "commonFuncs.h"

#define MAX_GAME_TYPES 28

int SMMCVARINFO = 
"Stuff";

int SMMCHANGES =
"Stuff";

str gameTypesStr[MAX_GAME_TYPES] =
		{	"mm_doom", "mm_chex", "mm_heretic", "mm_wolf3d", "mm_hexen1", "mm_duke3d", "mm_marathon", "mm_quake1", 
			"mm_rott", "mm_bstone", "mm_blood", "mm_strife", "mm_erad", "mm_c7", "mm_rmr", "mm_darkf", "mm_ipog", 
			"mm_disrup", "mm_witch", "mm_halflife", "mm_sw", "mm_cm", "mm_ps", "mm_rr", "mm_quake2", "mm_hexen2", 
			"mm_goldeneye"
};

str gameSetsStr[MAX_GAME_TYPES] = {
	"SetDoom", "SetChex", "SetHeretic", "SetWolf3d", "SetHexen1", "SetDuke3D", "SetMarathon", "SetQuake1", "SetRoTT", "SetBStone",
	"SetBlood", "SetStrife", "SetErad", "SetC7", "SetRmr", "SetDarkF", "SetIPOG", "SetDisrup", "SetWitch", "SetHL", "SetSW", "SetCM", 
	"SetExhumed", "SetRR", "SetQuake2", "SetHexen2", "SetGoldeneye"
};

str gameClassesSTR[MAX_GAME_TYPES] = {
	"DoomguyPlayer2", "ChexWarrior2", "CorvusPlayer2", "WolfenPlayer2", "HexenPlayer2", "DukePlayer2", "MarathonPlayer2", "QuakePlayer2", "IPFreeley2", "BlakeStone2",
	"Caleb2", "StrifeGuyPlayer2", "Eleena2", "Corridor7Player2", "RebelMoonCommando2", "KatarnPlayer2", "POGreedPlayer2", "DisruptorPlayer2", "GrondovalPlayer2", 
	"HalfLifePlayer2", "LoWangPlayer2", "CMPlayer2", "PSPlayer2", "Leonard2", "Bitterman2", "Demoness2", "JamesBond2"
};

str doomModes[2] = { "SetDoom", "SetDoom64" };
str wolfModes[3] = { "SODM1", "SODM2", "SetTotenkopf" };
str dukeModes[2] = { "SetDuke3D", "SetDukeLAB" };

bool activesets[MAX_GAME_TYPES];

#define MAX_MAPS				500
#define SAMSARA_CHANGELIST		175

int activeGameTypes[MAX_GAME_TYPES];
global int 2:alreadyshowedbs;
global int 3:randomallclear;
//global int 4:lastchosen;

str skill[5] = { "Kindergarten", "Easy", "Normal", "MajorDamage", "TotalCarnage" };

Script 667 OPEN 
{
	randomallclear = 0;
	if (!GetCVar("mm_init"))
	{
		SetCVar("mm_doom", true);
		SetCVar("mm_heretic", true);
		SetCVar("mm_hexen1", true);
		SetCVar("mm_chex", true);
		SetCVar("mm_wolf3d", true);
		SetCVar("mm_duke3d", true);
		SetCVar("mm_marathon", true);
		SetCVar("mm_bstone", true);
		SetCVar("mm_rott", true);
		SetCVar("mm_rr", true);
		SetCVar("mm_erad", true);
		SetCVar("mm_strife", true);
		SetCVar("mm_darkf", true);
		SetCVar("mm_cm", true);
		SetCVar("mm_c7", true);	
		SetCVar("mm_sw", true);
		SetCVar("mm_blood", true);
		SetCVar("mm_rmr", true);
		SetCVar("mm_ps", true);	
		SetCVar("mm_ipog", true);	
		SetCVar("mm_witch", true);				
		SetCVar("mm_disrup", true);		
		SetCVar("mm_quake1", true);		
		SetCVar("mm_halflife", true);	
		SetCVar("mm_quake2", true);	
		SetCVar("mm_hexen2", true);	
		SetCVar("mm_goldeneye", true);
		SetCVar("mm_wolfmode", 2);
		SetCVar("mm_randomcycle", 0);
		SetCVar("mm_fakehitlerfire", true);
		SetCVar("mm_wolffastdeath", false);
		SetCVar("mm_spawnmode", 0);
		SetCVar("mm_skilloverride", 5);	
		SetCVar("mm_multiply", 1);
		SetCVar("mm_newchex", true);
		SetCVar("mm_pinataparty", false);
		SetCVar("mm_rarespawns", true);
		SetCVar("mm_fullradiusdmg", false);
		SetCVar("mm_invisiblemode", false);
		SetCVar("mm_nobats", true);
		SetCVar("mm_specpermdeath", true);
		SetCVar("mm_maratele", true);
		
		SetCVar("mm_init", true);
		
		/*for(int a = 0; a < MAX_GAME_TYPES; a++)
		{
			SetCVar(gameTypesClass[a], false);
		}*/
	}
	ACS_Execute(669, 0, 0, 0, 0);
	
	if (alreadyshowedbs == 0)
	{
		HudMessage(s:"ExMixer Changelist ",d:SAMSARA_CHANGELIST; HUDMSG_FADEOUT|HUDMSG_LOG, 93003, CR_GOLD, 1.5, 0.28, 2.0, 0.5);
		if (GameType() == GAME_TITLE_MAP) { }
		if (Singleplayer() == 1)
		{
			if(GetCvar("sams_cvarinfo") == 0)
			{
				Delay(2);
				Hudmessage(s:SMMCVARINFO; HUDMSG_PLAIN|HUDMSG_LOG, 93000, CR_GRAY, 1.5, 0.25, 2.5);
				Hudmessage(s:"Also includes cvar info for SMM."; HUDMSG_FADEOUT, 93000, CR_RED, 1.5, 0.25, 2.0, 0.5);
			}
		}
		else { 	Delay(2); Log(s:SMMCVARINFO); }
		
		alreadyshowedbs = 1;
	}
	
	SpawnForced("SamsaraMixerCompendiumToken",0,0,0,0,0);
}

Script 668 (int spawncode, int override)
{
	int map;
	int setselect;
	int multitoken;
	int gameTypeMap;
	int numGameTypes = 0;
	
	map = GetLevelInfo(LEVELINFO_LEVELNUM);
	
	Switch(spawncode)
	{
		case 1:
			//ACS_NamedExecuteAlways("Samsara_MonsterSpawn",0,0,0,0); uncomment this for stronghold support, will deal with later
			if(GetCVar("mm_skilloverride") < 5)
			{
				multitoken = GetCVar("mm_skilloverride");
				GiveInventory("DifficultyToken", multitoken);
			}
			else
			{
				multitoken = GameSkill ();
				GiveInventory("DifficultyToken", multitoken);
			}
			
			if(GetCVar("mm_invisiblemode") == 1)
			{
				GiveInventory("InvisibleToken",1);
				SetActorProperty(0,APROP_Alpha,0);
			}
			
			if(GetCVar("mm_multiply") > 1 && !CheckInventory("MultiplyOverflowToken"))
			{
				int activator = ActivatorTid();
				int newtid = UniqueTid();
				for(int g = 1; g < GetCVar("mm_multiply"); g++)
				{
					SpawnForced(GetActorClass(activator),GetActorX(activator),GetActorY(activator),GetActorZ(activator),newtid,0);
					SetActorAngle(newtid,GetActorAngle(activator));
					GiveActorInventory(newtid, "MultiplyOverflowToken", 1);
					GiveActorInventory(newtid, "ThruSpeciesToken", 1);
					SetActorProperty(newtid,APROP_Species,GetActorClass(activator));
					SetActorProperty(activator,APROP_Species,GetActorClass(activator));
					GiveActorInventory(activator, "ThruSpeciesToken", 1);
					ThrustThing(random(0,256), 2, 0, newtid);
					Thing_ChangeTid(newtid, activator);
				}
				break;
			}
			else { break; }

			break;

		case 2:	
			if(!isSinglePlayer())
				Delay(5);
				
			Delay(1);
				
			if(GetCvar("mm_spawnmode") == 0 || GetCvar("mm_spawnmode") == 3)
			{
				for(int a = 0; a < MAX_GAME_TYPES; a++){
				if(activesets[a])
					activeGameTypes[numGameTypes++] = a;
				}
				
				if(GetCvar("mm_spawnmode") == 3)
				{
					if(numGameTypes == 0){
					SetActorState(0,"SetNull",true);
					break;
					}
				
					if(GetCvar("mm_randomcycle") > 0)
					{
						until (randomallclear == 1) { Delay(5); }
					}
				}
			}
			else if(GetCvar("mm_spawnmode") == 1)
			{
				for(int b = 0; b < MAX_GAME_TYPES; b++){
					gameTypeMap = strparam(s:gameTypesStr[b], d:map);;
					
					if(GetCvar(gameTypeMap))
						activeGameTypes[numGameTypes++] = b;
				}
			}		
			else
			{
				for(int c = 0; c < MAX_GAME_TYPES; c++){					
					if(GetCvar(gameTypesStr[c]))
						activeGameTypes[numGameTypes++] = c;
					}
			}
			
			setselect = random(0, numGameTypes - 1);
			
			//Doom
			switch(activeGameTypes[setselect])
			{
				//All other sets
				default:
					SetActorState(0,gameSetsStr[activeGameTypes[setselect]],true);
					break;
				case 0: // Doom
					switch(GetCvar("mm_doommode"))
					{
						case 0:
							if(ThingCountName("Doom64GuyMapDummy",0) > 0 && ThingCountName("DoomguyPlayer2",0) > ThingCountName("Doom64GuyMapDummy",0))
								SetActorState(0,doomModes[random(0,1)],true);
							else
								SetActorState(0,doomModes[ThingCountName("Doom64GuyMapDummy",0)],true);
							terminate;
						case 1:
							SetActorState(0,gameSetsStr[activeGameTypes[setselect]],true);
							terminate;
						case 2:
							SetActorState(0,"SetDoom64",true);
							terminate;
						case 3:
							SetActorState(0,doomModes[random(0,1)],true);
							terminate;						
					}
					break;
				case 3: // Wolf3d
					switch(GetCvar("mm_wolfmode"))
					{
						case 0: //doing this one the crude way
							int thingcountWolfLost = ThingCountName("WolfLostMapDummy",0);
							int thingcountTotenkopf = ThingCountName("TotenkopfMapDummy",0);
							if((thingcountWolfLost > 0 && ThingCountName("WolfenPlayer2",0) > thingcountWolfLost) && (thingcountTotenkopf > 0 && ThingCountName("WolfenPlayer2",0) > thingcountTotenkopf))
								SetActorState(0,wolfModes[random(0,2)],true);
							else if(thingcountWolfLost > 0 && ThingCountName("WolfenPlayer2",0) > thingcountWolfLost)
								SetActorState(0,wolfModes[random(0,1)],true);
							else if(thingcountTotenkopf > 0 && ThingCountName("WolfenPlayer2",0) > thingcountTotenkopf)
							{
								if(random(0,1) == 1)
									SetActorState(0,wolfModes[2],true);
								else
									SetActorState(0,wolfModes[0],true);
							}
							else if(thingcountWolfLost > 0 && thingcountTotenkopf > 0 && (thingcountWolfLost + thingcountTotenkopf) >= ThingCountName("WolfenPlayer2",0))
								SetActorState(0,wolfModes[random(1,2)],true);
							else if(thingcountWolfLost > 0)
								SetActorState(0,wolfModes[1],true);
							else if(thingcountTotenkopf > 0)
								SetActorState(0,wolfModes[2],true);
							else
								SetActorState(0,wolfModes[0],true);
							terminate;
						case 1:
							SetActorState(0,"SODM1",true);
							terminate;
						case 2:
							SetActorState(0,"SODM2",true);
							terminate;
						case 3:
							SetActorState(0,"SetTotenkopf",true);	
							terminate;
						case 4: 
							SetActorState(0,gameSetsStr[activeGameTypes[setselect]],true);
							terminate;			
						case 5:
							SetActorState(0,wolfModes[random(0,2)],true);
							terminate;							
					}
					break;
				case 5:
					switch(GetCvar("mm_dukemode"))
					{
						case 0:
							if(ThingCountName("DukeLabMapDummy",0) > 0 && ThingCountName("DukePlayer2",0) > ThingCountName("DukeLabMapDummy",0))
								SetActorState(0,dukeModes[random(0,1)],true);
							else
								SetActorState(0,dukeModes[ThingCountName("DukeLabMapDummy",0)],true);
							terminate;
						case 1:
							SetActorState(0,gameSetsStr[activeGameTypes[setselect]],true);
							terminate;
						case 2:
							SetActorState(0,"SetDukeLAB",true);
							terminate;
						case 3:
							SetActorState(0,dukeModes[random(0,1)],true);
							terminate;						
					}
					break;
			}
			break;
			
		case 3:
		if(GetCVar("mm_multiply") > 1)
		{
			multitoken = GetCvar("mm_multiply");
			GiveInventory("MultiplyToken", multitoken);
			break;
		}
		else { break; }
		
		case 4:
			SetResultValue(GetCvar("mm_doomrandomizer"));
			break;
	}
}

Script 669 (void)
{
	int selectloop;	
	int randomvalue;
	int randnum;
	int erroramount = 0;
	int lastchosen = 0;
	
	if (GetCVar("mm_spawnmode") == 3)
	{
		selectloop = 0;
		randomvalue = GetCvar("mm_randomcycle");
		for(int a = 0; a < MAX_GAME_TYPES; a++){					
			activesets[a] = 0;
		}
		
		While (selectloop < randomvalue)
		{
			randnum = random(1, MAX_GAME_TYPES);
			
			if(!GetCVar(gameTypesStr[randnum])||lastchosen == randnum) { if(erroramount > 100){ selectloop = randnum; break; } else{erroramount++;} }
					else { activesets[randnum-1] = true; selectloop++; erroramount = 0; lastchosen = randnum; }
		}
		randomallclear = 1;
	}
}

Script 670 OPEN
{
	int spawnmode;
	int oldmode;
	int drawn;
	while(true)
	{
		if(GetInvasionState() == 1 || GetInvasionState() == 5)
		{
			spawnmode = GetCvar("mm_spawnmode");
			if(oldmode != spawnmode && spawnmode == 3)
			{
				ACS_Execute(669, 0, 0, 0, 0);
				drawn = 1;
			}
			else if(oldmode != spawnmode && spawnmode == 0)
			{
				ACS_NamedExecuteAlways("ExMixerClassBasedSpawn",0,0,0,0);
				drawn = 1;
			}
			else if(spawnmode == 1 || spawnmode == 2)
				drawn = 1;
				
		}
		else if(GetInvasionState() == 4)
		{
			oldmode = -1;
			drawn = 0;
		}
		
		Delay(1);
		if(drawn == 1)
			oldmode = spawnmode;
	}
}

Script 671 (void)
{
	int checkskill;
	checkskill = ACS_ExecuteWithResult (680, 3);

	SetActorState(0,skill[checkskill],true);
}

Script "MarathonTeleport" (void)
{
	if(GetCVar("mm_maratele") == 1)
	{
		GiveInventory("TeleportIn", 1);
	}
	else { terminate; }
}

Script 680 (int pick)
{
	int response;

	Switch (pick)
	{
		case 1:
        response = GetCVar("mm_fakehitlerfire");
        break;
		
		case 2:
		response = GetCVar("mm_wolffastdeath");
		break;
		
		case 3:
		if(GetCVar("mm_skilloverride") < 5)
		{
			response = GetCVar("mm_skilloverride");
		}
		else
		{
			response = GameSkill ();
		}
		break;
		
		case 4:
		response = GetCVar("mm_dropdefault");
		break;
		
		case 5:
		response = GetCvar("mm_pinataparty");
		break;
		
		case 6:
		response = GetCvar("mm_newchex");
		break;
		
		case 7:
		response = GetCvar("mm_rarespawns");
		break;
		
		case 8:
		response = GetCvar("mm_invisiblemode");
		break;
		
		case 9:
		response = GetCvar("mm_fullradiusdmg");
		break;
		
		case 10:
		response = GetCvar("mm_nobats");
		break;
		
		case 11:
		response = GetCvar("mm_specpermdeath");
		break;
		
		case 12:
		if(GetCvar("mm_spawnmode") < 3)
		{
		response = 1;
		}
		break;
	}
	SetResultValue(response);
}

Script "ExMixerClassBasedSpawn" (void)
{
	if(GetCvar("mm_spawnmode") != 0)
		terminate;
		
	int clients = PlayerCount();
	int playervalue;

	for(int a = 0; a < MAX_GAME_TYPES; a++)
	{
		activesets[a] = false;
	}

	for(int p = 0; p < clients; p++)
	{	
		if(PlayerInGame(p) == true)
		{
			for(int b = 0; b < MAX_GAME_TYPES; b++)
			{
				if(PlayerClass(p) == b)
				{
					activesets[b] = true;
					break;
				}
			}
		}
		else
		{
			clients++;
		}
	}
}

Script "ExMixerClassBasedSpawn_OPEN" Open { ACS_NamedExecuteAlways("ExMixerClassBasedSpawn",0,0,0,0); }
Script "ExMixerClassBasedSpawn_RESPAWN" RESPAWN { ACS_NamedExecuteAlways("ExMixerClassBasedSpawn",0,0,0,0); }
Script "ExMixerClassBasedSpawn_REOPEN" REOPEN { ACS_NamedExecuteAlways("ExMixerClassBasedSpawn",0,0,0,0); }
Script "ExMixerClassBasedSpawn_ENTER" ENTER { ACS_NamedExecuteAlways("ExMixerClassBasedSpawn",0,0,0,0);}
Script "ExMixerClassBasedSpawn_DISCONNECT" (int players) DISCONNECT { ACS_NamedExecuteAlways("ExMixerClassBasedSpawn",0,0,0,0); }

Script "Samsara_InvasionChecker" (void)
{
	If(GetCvar("invasion"))
		SetResultValue(1);
	else
		SetResultValue(0);
}

Script "Samsara_OpposingForceSpawnCheck" (void)
{
	SetResultValue(ThingCountName("HalfLifeAdrianModeMapDummy",0));
}

Script "Samsara_Doom64SpawnCheck" (void)
{
	SetResultValue(ThingCountName("Doom64GuyMapDummy",0));
}

/*ACTOR PinataDrop : RandomSpawner
{
	dropitem "Ammo1Small" 255 256
	dropitem "Ammo2Small" 255 256
	dropitem "AmmoBackpack" 255 64
	dropitem "Ammo3Small" 255 128
	dropitem "Ammo4Small" 255 128
	dropitem "HealPack1" 255 128
	dropitem "HealPack2" 255 64
	dropitem "SamsaraSlotOneDrop" 255 32
	dropitem "SamsaraSlotTwoDrop" 255 32
	dropitem "Ammo1Big" 255 16
	dropitem "Ammo2Big" 255 16
	dropitem "Visor" 255 16
	dropitem "ArmorPack" 255 16
	dropitem "SamsaraSlotThreeDrop" 255 16
	dropitem "Ammo3Big" 255 8
	dropitem "Ammo4Big" 255 8
	dropitem "ArmorPack" 255 8
	dropitem "SuperHealt2" 70 8
	dropitem "PartialInvisibility" 255 8
	dropitem "SamsaraSlotFourDrop" 115 8
	dropitem "MegaPack" 45 8
	dropitem "SamsaraSlotFiveDrop" 110 4
	dropitem "InvulnPowerup" 55 4
	dropitem "BioSuit" 255 2
	dropitem "SamsaraSlotSixDrop" 110 2
	dropitem "SamsaraUniquePickup64" 100 2
	dropitem "SamsaraSlotSevenDrop" 80 1
	dropitem "HeXenBeaconItem" 105 1
}*/

int maxPinataCommonQuality = 9;
int maxPinataUncommonQuality = 18;
int maxPinataRareQuality = 19;
int maxPinataEpicQuality = 11;
int maxPinataLegendaryQuality = 15;

str PinataDoomCommonQuality[9] = { "Ammo1Small", "Ammo2Small", "HealPack0", "ArmorScrap200", "HealPack1", "Ammo1Big", "Ammo2Big", "SamsaraSlotTwoDrop", "SamsaraSlotFourDrop" };
str PinataDoomUncommonQuality[18] = { "Ammo3Small", "Ammo4Small", "HealPack1", "Ammo1Big", "Ammo2Big", "Visor", "BioSuit", "HealPack2", "SuperHealth2", "PartialInvisibility", "SamsaraSlotOneDrop", "SamsaraSlotTwoDrop", "SamsaraSlotFourDrop", "SamsaraSlotThreeDrop", "Ammo1Small", "Ammo2Small", "ArmorPack1", "AmmoBackpack" };
str PinataDoomRareQuality[19] = { "Ammo1Big", "Ammo2Big", "HealthPack2", "SamsaraSlotOneDrop", "SamsaraSlotThreeDrop", "SamsaraSlotFourDrop", "Ammo3Big", "Ammo4Big", "SamsaraSlotFiveDrop", "SamsaraSlotSixDrop", "AmmoBackpack", "SuperHealth2", "ArmorPack2", "Ammo3Small", "Ammo4Small", "Megapack", "Visor", "BioSuit", "PartialInvisibility"};
str PinataDoomEpicQuality[11] = { "AmmoBackpack", "SuperHealth2", "ArmorPack2", "Ammo3Big", "Ammo4Big", "SamsaraSlotFiveDrop", "SamsaraSlotSixDrop", "Megapack", "SamsaraSlotSevenDrop", "Ammo1Big", "Ammo2Big" };
str PinataDoomLegendaryQuality[15] = { "AmmoBackpack", "Megapack", "SamsaraSlotSevenDrop", "Ammo3Big", "Ammo4Big", "RageRune", "SpreadRune", "StrengthRune", "ResistanceRune", "ProsperityRune", "DrainRune", "RegenerationRune", "HasteRune", "ReflectionRune", "HighJumpRune" };

//f me
int PinataDoomCommonQualityInt[9] = { 50, 50, 50, 50, 25, 10, 10, 5, 5 };
int PinataDoomUncommonQualityInt[18] = { 50, 50, 50, 25, 25, 15, 15, 10, 10, 10, 15, 15, 10, 10, 10, 10, 10, 5 };
int PinataDoomRareQualityInt[19] = { 50, 50, 30, 30, 30, 30, 25, 25, 15, 15, 10, 10, 10, 10, 10, 5, 5, 5 };
int PinataDoomEpicQualityInt[11] = { 50, 50, 50, 50, 50, 30, 30, 25, 10, 5, 5 };
int PinataDoomLegendaryQualityInt[15] = { 100, 50, 50, 30, 30, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10 };

Script "Samsara_PinataHandler" (int health, int radius, int height)
{
	if(!GetCvar("mm_pinataparty"))
		terminate;
		
	int spawneditems, randomchance, randomitem, newtid;
	int maxitems = ((height*4)*(radius*radius))/4096;
	if(health < 200)
	{
		newtid = UniqueTid();
		While(spawneditems < maxitems)
		{
			randomchance = random(0,100);
			randomitem = random(0,maxPinataCommonQuality-1);
			if(randomchance < PinataDoomCommonQualityInt[randomitem])
			{
				SpawnForced(PinataDoomCommonQuality[randomitem],GetActorX(0),GetActorY(0),GetActorZ(0),newtid,0);
				ThrustThing(random(0,256),2,0,newtid);
				ThrustThingZ(newtid,random(17,35),0,1);
				Thing_ChangeTid(newtid,0);
				spawneditems++;
			}
		}
	}
	else if(health < 1000)
	{
		newtid = UniqueTid();
		While(spawneditems < maxitems)
		{
			randomchance = random(0,100);
			randomitem = random(0,maxPinataUncommonQuality-1);
			if(randomchance < PinataDoomUncommonQualityInt[randomitem])
			{
				SpawnForced(PinataDoomUncommonQuality[randomitem],GetActorX(0),GetActorY(0),GetActorZ(0),newtid,0);
				ThrustThing(random(0,256),2,0,newtid);
				ThrustThingZ(newtid,random(17,35),0,1);
				Thing_ChangeTid(newtid,0);
				spawneditems++;
			}
		}
	}
	else if(health < 2500)
	{
		newtid = UniqueTid();
		While(spawneditems < maxitems)
		{
			randomchance = random(0,100);
			randomitem = random(0,maxPinataRareQuality-1);
			if(randomchance < PinataDoomRareQualityInt[randomitem])
			{
				SpawnForced(PinataDoomRareQuality[randomitem],GetActorX(0),GetActorY(0),GetActorZ(0),newtid,0);
				ThrustThing(random(0,256),2,0,newtid);
				ThrustThingZ(newtid,random(17,35),0,1);
				Thing_ChangeTid(newtid,0);
				spawneditems++;
			}
		}
	}
	else if(health < 5000)
	{
		newtid = UniqueTid();
		While(spawneditems < maxitems)
		{
			randomchance = random(0,100);
			randomitem = random(0,maxPinataEpicQuality-1);
			if(randomchance < PinataDoomEpicQualityInt[randomitem])
			{
				SpawnForced(PinataDoomEpicQuality[randomitem],GetActorX(0),GetActorY(0),GetActorZ(0),newtid,0);
				ThrustThing(random(0,256),2,0,newtid);
				ThrustThingZ(newtid,random(17,35),0,1);
				Thing_ChangeTid(newtid,0);
				spawneditems++;
			}
		}
	}
	else
	{
		newtid = UniqueTid();
		While(spawneditems < maxitems)
		{
			randomchance = random(0,100);
			randomitem = random(0,maxPinataLegendaryQuality-1);
			if(randomchance < PinataDoomLegendaryQualityInt[randomitem])
			{
				if(SpawnForced(PinataDoomLegendaryQuality[randomitem],GetActorX(0),GetActorY(0),GetActorZ(0),newtid,0))
				{
					GiveActorInventory(newtid,"GravityToken",1);
					ThrustThing(random(0,256),2,0,newtid);
					ThrustThingZ(newtid,random(17,35),0,1);
					Thing_ChangeTid(newtid,0);
					spawneditems++;
				}
			}
		}
	}
}