#library "MONSTER"
#include "zcommon.acs"
#include "commonFuncs.h"

#define KNIFE_ANIM_TICS 2
#define NET_ANIM_TICS 5
#define SHADOW_HOUND_BITE 5
#define PROTOZOID_BITE 4

#define KRIST_BASE 6000
#define NME_BASE 7000
#define TOM_BASE 8000
#define TOMSNAKE_BASE 9000
#define SUMOBURNTIC 16

#define OSCURO_MODE_TIME 2

#define MAXPLAYERS 64
#define SKULLCOOLDOWNTID 1000

#define CLASSCOUNT          28

#define MAX_RING_MONST 128
#define RING_MONST_BASE_TID		1000000		// base TIDs for SW ring monsters' objects

int ringcounter;
int krist_id = 0;
int nme_id = 0;

int serpringnum[MAX_RING_MONST];
int ringdur[MAX_RING_MONST];
int ringMonstTIDtrack[MAX_RING_MONST];		// track the TID-array index correspondence
int ringMonstCount = 0;

int sumofirecount[MAXPLAYERS];


Script 800 (void) {
	int thisactor = ActivatorTID();
	SetActivatorToTarget(0);
	int target = ActivatorTID();
	int xdiff = GetActorX(target) - GetActorX(thisactor);
	int ydiff = GetActorY(target) - GetActorY(thisactor);
	int faceangle = VectorAngle(xdiff, ydiff);
	int angdiff = (GetActorAngle(thisactor) - faceangle) >> 8;
	
	if(angdiff > 12)
		SetResultValue(true);
	else if(angdiff < -12)
		SetResultValue(false);
	else
		GiveActorInventory(thisactor, "ChargeSignal", 1);
	SetResultValue(false);
}

Script 801 (int basetid, int type) {
	switch(basetid) {
		case KRIST_BASE:
			if(!type) {
				Thing_ChangeTID(0, basetid + krist_id);
				krist_id++;
			}
			else if(type == 1)
				AmbientSound("Krist/See", 127);
			else {
				SetActivatorToTarget(0);
				GiveInventory("RoTT_BossDeathAnnouncer_Krist", 1);
			}	
		break;
		case NME_BASE:
			if(!type) {
				Thing_ChangeTID(0, basetid + nme_id);
				nme_id++;
			}
			else if(type == 1)
				AmbientSound("NME/See", 127);
			else {
				SetActivatorToTarget(0);
				GiveInventory("RoTT_BossDeathAnnouncer_NME", 1);
			}	
		break;
		case TOM_BASE:
			SetActivatorToTarget(0);
			GiveInventory("RoTT_BossDeathAnnouncer_Tom", 1);
		break;
		case TOMSNAKE_BASE:
			SetActivatorToTarget(0);
			GiveInventory("RoTT_BossDeathAnnouncer_TomSnake", 1);
		break;
	}
}

// 802 is used by Half Life class

Script 808 (void) {
    SetActivatorToTarget(0);
	if(GetActorProperty(0, APROP_HEALTH) <= 0)
	  SetResultValue(1);
	else
	  SetResultValue(0);
}

Script 809 (void) {
	int thisactor = ActivatorTID();
	SetActivatorToTarget(0);
	int target = ActivatorTID();
	int xdiff = GetActorX(target) - GetActorX(thisactor);
	int ydiff = GetActorY(target) - GetActorY(thisactor);
	int faceangle = VectorAngle(xdiff, ydiff) - GetActorAngle(thisactor);
	
	SetActorAngle(thisactor, faceangle + 0.5);
}

Script 810 (int id, int mode) CLIENTSIDE {
	if(!mode) {
		switch (id) {
			case KRIST_BASE:
				Log(s:"\cfKrist Defeated!\c-");
			break;
			case NME_BASE:
				Log(s:"\cfNME Defeated!\c-");
			break;
			case TOM_BASE:
				Log(s:"\cfEl Oscuro Defeated!\c-");
			break;
			case TOMSNAKE_BASE:
				Log(s:"\cfOscuro Defeated!\c-");
			break;
		}
	}
	else
		LocalAmbientSound("RoTT/BossDeath", 35);
}

Script 811 (void) {
	if(CheckInventory("OscuroVulnerable"))
		terminate;
	GiveInventory("OscuroVulnerable", 1);
	
	for(int i = 0; i < OSCURO_MODE_TIME; i++)
		Delay(35);
	TakeInventory("OscuroVulnerable", 1);
}

script 812 (void) {
	int i;
	int knifeNum;
	
	GiveInventory("NoWeapon", 1);
	Setweapon("NoWeapon");
	SetHudSize(214,200,0);
	SetActorProperty(0,APROP_SPEED,0.1);
	Setfont("NET1");
	HudMessage(s:"A";0,602,0,107.0,100.0,0);

	if (CheckInventory("RottKnife") == 1) {
		GiveInventory("NoWeapon", 1);
		Setweapon("NoWeapon");
		Delay(15); // Give some time for the weapon to lower
		SetHudSize(214,200,0);
		
		for(i = 1; i <= 7; i++){
			knifeNum = strparam(s:"KNIFE", d:i);
			Setfont(knifeNum);
			HudMessage(s:"A";0,602,0,107.0,100.0,0);
			delay(KNIFE_ANIM_TICS);
		}
		
		Setfont("NET5");
		HudMessage(s:"A";0,602,0,107.0,100.0,0);
		delay(KNIFE_ANIM_TICS);
		
		
		HudMessage(s:"";0,602,0,107.0,100.0,0);
		delay(8);
		SetActorProperty(0,APROP_SPEED,1.0);
		TakeInventory("NoWeapon", 1);
		SetWeapon(0);
		Terminate;
	}
	else {
		SetFont("SMALLFONT");
		ACS_ExecuteAlways(813, 0, 0);
		Print(s:"\cfSwing your mouse left and right to break free!");
		terminate;
	}
 
}


Script 813 (int currentweapon) {
	int i;
	int netNum;
	
    int a, b;
    int input = GetPlayerInput(-1,INPUT_YAW);   
        
   
    if(input >= 640)
		a++;
    
    if(input <= -640)
		b++;
    
	if(GetActorProperty(0, APROP_HEALTH) <= 0) {
		HudMessage(s:"";0,602,0,107.0,100.0,0);
		Terminate;
	}
	
        if (a &&  b >= 22) {
            SetHudSize(214,200,0);
			
			for(i = 2; i <= 5; i++){
				netNum = strparam(s:"NET", d:i);
				Setfont(netNum);
				HudMessage(s:"A";0,602,0,107.0,100.0,0);
				delay(NET_ANIM_TICS);
			}
				
            SetActorProperty(0,APROP_SPEED,1.0);
            HudMessage(s:"";0,602,0,107.0,100.0,0);
			TakeInventory("NoWeapon", 1);
			SetWeapon(currentweapon);
			a = 0;
			b = 0;
            Terminate;
        } 
			
	delay(1);
	restart;
}

Script 814 ENTER {
	HudMessage(s:"";0,602,0,107.0,100.0,0);
}

Script 700 (int radius, int who, int actortype) // Form the ring
{
	int tid = ActivatorTID(); // Owner TID
	int actor = "";
	int arrIndex;
	
	switch (actortype)
	{
		case 0:
			actor = "GuardCircleFire";
		break;
		case 1:
			actor = "WizardCircleFire";
		break;
		case 2:
			actor = "EvilSkull";
		break;
	}
	
	for(arrIndex = 0; arrIndex < ringMonstCount; arrIndex++)
		if(ringMonstTIDtrack[arrIndex] == tid)
			break;

	if(arrIndex == ringMonstCount){	// not found, add it to the tracker array

		if(arrIndex == MAX_RING_MONST){	// the ring monsters in excess won't have any ring
			log(s:"Warning: MAX_RING_MONST (", d:MAX_RING_MONST, s:") has been exceeded\n");
			terminate;
	}
		
		ringMonstTIDtrack[arrIndex] = tid;
		++ringMonstCount;
	}
	
	for(int m = 0; m < 32; m++)
		Thing_Remove(RING_MONST_BASE_TID + (32*arrIndex) + m);
	
	int cx, cy, cz;
	
	if(actortype == 2)
	     cz = GetActorZ(tid) + 64.250;
	else
		 cz = GetActorZ(tid) + 32.125;
	
	int pang = GetActorAngle(tid) >> 8;
	
	for(int i = 0; i < 32; i++)
	{
		cx = GetActorX(tid) + radius*cos(pang<<8);
		cy = GetActorY(tid) + radius*sin(pang<<8);	
		pang += 8;
		Spawn(actor, cx, cy, cz, RING_MONST_BASE_TID + (32*arrIndex) + i, 0); 
	}
	
	if(!who)
		ACS_executeAlways(701, 0, tid, pang, radius); // Align coords
	else
	{
		if(actortype == 2) // Serpent God
		{
			ACS_ExecuteAlways(1787, 0, tid, pang, radius); // For monsters
			ACS_ExecuteAlways(1789, 0, tid, arrIndex); // Tracks if any skulls are alive or not
		}
		else
			ACS_ExecuteAlways(702, 0, tid, pang, radius); // For monsters
	}
}

Script 701 (int tid, int pang, int radius) // Constantly rotate the ring
{
	int arrIndex;
	
	for(arrIndex = 0; ringMonstTIDtrack[arrIndex] != tid; arrIndex++)
		;

	if(!CheckActorInventory(tid, "RingTimer") || GetActorProperty(tid, APROP_HEALTH) <= 0)
	{
		for(int m = 0; m < 32; m++)
			Thing_Remove(RING_MONST_BASE_TID + (32*arrIndex) + m);
		Terminate;
	}
	
	if(CheckActorInventory(tid, "HaveRing"))
		Terminate;
		
	int cx, cy;
	int cz = GetActorZ(tid) + 32.125;
	
	for(int i = 0; i < 32; i++)
	{
		pang += 8;
		cx = GetActorX(tid) + radius*cos(pang<<8);
		cy = GetActorY(tid) + radius*sin(pang<<8);		
		SetActorPosition(RING_MONST_BASE_TID + (32*arrIndex) + i, cx, cy, cz, 0);
	}
	Delay(2);
	Restart;
}

Script 702 (int tid, int pang, int radius) // Constantly rotate the ring (monsters)
{
	int arrIndex;
	
	for(arrIndex = 0; ringMonstTIDtrack[arrIndex] != tid; arrIndex++)
		;
	
	if(GetActorProperty(tid, APROP_HEALTH) <= 0 | ringdur[arrIndex] >= 250)
	{
		for(int m = 0; m < 32; m++)
			Thing_Remove(RING_MONST_BASE_TID + (32*arrIndex) + m);
		TakeActorInventory(tid, "HasSkull", 1);
		ringdur[arrIndex] = 0;
		Terminate;
	}
		
	int cx, cy;
	int cz = GetActorZ(tid) + 32.125;
	
	for(int i = 0; i < 32; i++)
	{
		pang += 8;
		cx = GetActorX(tid) + radius*cos(pang<<8);
		cy = GetActorY(tid) + radius*sin(pang<<8);		
		SetActorPosition(RING_MONST_BASE_TID + (32*arrIndex) + i, cx, cy, cz, 0);
	}
	Delay(2);
	ringdur[arrIndex]++;
	Restart;
}

Script 1787 (int tid, int pang, int radius) // Constantly rotate the ring (serpent god)
{
	int arrIndex;
	
	for(arrIndex = 0; ringMonstTIDtrack[arrIndex] != tid; arrIndex++)
		;
	
	if(GetActorProperty(tid, APROP_HEALTH) <= 0)
	{
		for(int m = 0; m < 32; m++)
			Thing_Damage(RING_MONST_BASE_TID + (32*arrIndex) + m, 999, MOD_EXIT);
		Terminate;
	}
		
	int cx, cy;
	int cz = GetActorZ(tid) + 64.250;
	
	for(int i = 0; i < 32; i++)
	{
		pang += 8;
		cx = GetActorX(tid) + radius*cos(pang<<8);
		cy = GetActorY(tid) + radius*sin(pang<<8);		
		SetActorPosition(RING_MONST_BASE_TID + (32*arrIndex) + i, cx, cy, cz, 0);
	}
	Delay(2);
	Restart;
}

Script 1788 (void) // Skull cooldown giver
{
	for(int m = 0; m < MAXPLAYERS; m++)
		GiveActorInventory(SKULLCOOLDOWNTID+m, "SkullJumpCooldown", 1);
}

Script 1789 (int tid, int arrIndex) // Skull Tracker
{
	if(GetActorProperty(tid, APROP_HEALTH) <= 0 || CheckActorInventory(tid, "HasSkull") == 0)
	{
		serpringnum[arrIndex] = 0;
		Terminate;
	}
	
	for(int i = 0; i < 32; i++)
	{
		if(GetActorProperty(RING_MONST_BASE_TID + (32*arrIndex) + i, APROP_HEALTH) <= 0)
		{
			if(!(serpringnum[arrIndex] & (1 << i)) )
			{
				TakeActorInventory(tid, "HasSkull", 1);				
				serpringnum[arrIndex] |= (1 << i);
			}
		}
	}
	Delay(10);
	Restart;
}

Script 1767 (void) CLIENTSIDE {
	int i;
	int sHoundBNum;

	FadeTo(0,0,0,1.0,0);
	SetHudSize(214,200,1);
	
	for(i = 1; i <= 5; i++){
		sHoundBNum = strparam(s:"SHOUNDB", d:i);
		SetFont(sHoundBNum);
		HudMessage(s:"A";0,500+PlayerNumber(),0,107.0,100.0,0.5);
		Delay(SHADOW_HOUND_BITE);
	}	

    HudMessage(s:"";0,500+PlayerNumber(),0,107.0,100.0,0.1);
	Delay(SHADOW_HOUND_BITE);	
	FadeTo(0,0,0,0,1.5);
	Delay(2);
}

Script 2313 (void)
{
	int i;
	int bitten_num;
	
	GiveInventory("GettingSlimed",1);
	ActivatorSound("slimer/attack",127);
	DamageThing(6);
	
	for(i = 0; i < 6; i++){
		bitten_num = strparam(s:"BITTEN_", d:i);
		SetHudSize(320,200,0);SetFont(bitten_num);HudMessage(s:"A"; HUDMSG_PLAIN,200+PlayerNumber(),0,0.5,0.5,0.5);	
		Delay(PROTOZOID_BITE);
	}
		
	ActivatorSound("slimer/attack",127);
	DamageThing(6);
	
	for(; i < 9; i++){
		bitten_num = strparam(s:"BITTEN_", d:i);
		SetHudSize(320,200,0);SetFont(bitten_num);HudMessage(s:"A"; HUDMSG_PLAIN,200+PlayerNumber(),0,0.5,0.5,0.5);	
		Delay(PROTOZOID_BITE);
	}
	
	ActivatorSound("slimer/attack",127);
	
	
	bitten_num = strparam(s:"BITTEN_", d:i);
	SetHudSize(320,200,0);SetFont(bitten_num);HudMessage(s:"A"; HUDMSG_PLAIN,200+PlayerNumber(),0,0.5,0.5,0.5);	
	
	Delay(10);
	ACS_ExecuteAlways(2314,0,0,0,0);
}

script 2314 (void)
{	
	if(CheckInventory("Health") > 0 && CheckInventory("ProtozoidAttackOMG") != 1)
	{
		ActivatorSound("slimer/attack",127);
		DamageThing(6);
		SetHudSize(320,200,0);SetFont("BITTEN10");HudMessage(s:"A";HUDMSG_PLAIN,200+PlayerNumber(),0,0.5,0.5,0.5);
		Delay(7);	
		SetHudSize(320,200,0);SetFont("BITTEN_8");HudMessage(s:"A";HUDMSG_PLAIN,200+PlayerNumber(),0,0.5,0.5,0.5);
		Delay(7);	
		SetHudSize(320,200,0);SetFont("BITTEN_9");HudMessage(s:"A";HUDMSG_PLAIN,200+PlayerNumber(),0,0.5,0.5,0.7);
		Delay(15);
		restart;		
	}
	else if (CheckInventory("ProtozoidAttackOMG") == 1)
	{
		SetHudSize(320,200,0);SetFont("TNT1A0");HudMessage(s:""; HUDMSG_PLAIN,200+PlayerNumber(),0,0.5,0.5,0.5);
		ActivatorSound("slimer/death",127);
		GiveInventory("KillCount",1);
		TakeInventory("GettingSlimed",1);
		SpawnProjectile(0,"SlimerExploded",0,0,0,0,0);
		Delay(2);
		Terminate;
	}
	else if (CheckInventory("Health") < 1)
	{
		TakeInventory("GettingSlimed",1);
		Delay(15);
		SpawnProjectile(0,"Duke3D_Protozoid",0,0,0,0,0);
		Delay(2);
		Terminate;		
	}
}

Script 4109 (void)
{
	sumofirecount[PlayerNumber()] = SUMOBURNTIC;
	while(sumofirecount[PlayerNumber()] > 0)
	{
		Delay(2);
		Thing_Damage(ActivatorTID(), random(1, 2), MOD_LAVA);
		sumofirecount[PlayerNumber()]--;
	}
}

Script 4110 (void) CLIENTSIDE {
	int i;
	int spatOnNum;
	
	for(i = 0; i < 17; i++){
		spatOnNum = strparam(s:"SPATON", d:i);
		SetHudSize(214,200,0);SetFont(spatOnNum);HudMessage(s:"A";HUDMSG_PLAIN,100+PlayerNumber(),0,107.0,100.0,1.0);
		Delay(3);
	}
	
	spatOnNum = strparam(s:"SPATON", d:i);
	
	SetHudSize(214,200,0);SetFont(spatOnNum);HudMessage(s:"A";HUDMSG_PLAIN,100+PlayerNumber(),0,107.0,100.0,0.3);
	Delay(3);
	
	SetHudSize(214,200,0);HudMessage(s:"";HUDMSG_PLAIN,100+PlayerNumber(),0,107.0,100.0,0.1);	
	Delay(2);	
}

Script 2518 (void)
{
	SetActivator(0,AAPTR_TARGET);
	If(CheckInventory("IsSamsaraClass") == 1)
	{
	Thing_Damage2(0,50000,"DarkSide");
	terminate;
	}
}

Script 2519 (void)
{
	SetActivator(0,AAPTR_MASTER);
	ChangeCamera(0,0,0);
	terminate;
}

Script 2520 (int health) //geneworm orb
{

	Switch(health)
	{
		Case 1:
		SetActorProperty(0,APROP_Health, 5760);
		break;
		Case 2:
		SetActorProperty(0,APROP_Health, 4320);
		break;
		Case 3:
		SetActorProperty(0,APROP_Health, 2880);
		break;
		Case 4:
		SetActorProperty(0,APROP_Health, 1440);
		break;
	}
}

Str Painmods[5] = { "", "PainMod1", "PainMod2", "PainMod3", "PainMod4" };

Script 2521 (void)
{
	int painmod = CheckInventory("GeneWormOrbToken");
	If(GetActorProperty(0,APROP_HEALTH) < 1)
	{
		terminate;
	}
	If(GetActorProperty(0,APROP_HEALTH) <= 1440)
	{
		If(painmod != 4)
		{
		GiveInventory("GeneWormOrbToken",1);
		painmod = CheckInventory("GeneWormOrbToken");
		SetActorState(0,painmods[painmod],TRUE);
		}
		Else{}
	}
	Else If(GetActorProperty(0,APROP_HEALTH) <= 2880)
	{
		If(painmod != 3)
		{
		GiveInventory("GeneWormOrbToken",1);
		painmod = CheckInventory("GeneWormOrbToken");
		SetActorState(0,painmods[painmod],TRUE);
		}
		Else{}
	}
	Else If(GetActorProperty(0,APROP_HEALTH) <= 4320)
	{
		If(painmod != 2)
		{
		GiveInventory("GeneWormOrbToken",1);
		painmod = CheckInventory("GeneWormOrbToken");
		SetActorState(0,painmods[painmod],TRUE);
		}
		Else{}
	}
	Else If(GetActorProperty(0,APROP_HEALTH) <= 5760)
	{
		If(painmod != 1)
		{
		GiveInventory("GeneWormOrbToken",1);
		painmod = CheckInventory("GeneWormOrbToken");
		SetActorState(0,painmods[painmod],TRUE);
		}
		Else{}
	}
	Delay(1);
	Restart;
}

Script 2522 (void)
{
	For(int i = 0; i < 700; i++)
	{
		If(GetActorProperty(0,APROP_HEALTH) <= 0)
		{
			SetActivator(0, AAPTR_MASTER);
			SetActorState(0,"BigPain3",TRUE);
			terminate;
		}
		If(i >= 699)
		{
			SetActorState(0,"Quit",TRUE);
			SetActivator(0, AAPTR_MASTER);
			SetActorState(0,"HealSelf",TRUE);
			terminate;
		}
		Delay(1);
	}
}

function void fadetobold(int a,int b,int c,int d,int e)
{
   for(int i=0;i<PlayerCount();i++)
   {
      SetActivator(0,AAPTR_PLAYER1>>i);
      FadeTo(a,b,c,d,e);
   }
}
Script 2523 (void)
{
	Delay(64);
	AmbientSound("GeneWorm/PortalSuckin",127);
	fadetobold(255,0,255,0.33,0.25);
	Delay(16);
	fadetobold(255,0,255,0.0,0.25);
	Delay(80);
	AmbientSound("GeneWorm/PortalSuckin",127);
	fadetobold(255,0,255,0.5,0.25);
	Delay(16);
	fadetobold(255,0,255,0.0,0.25);
	Delay(112);
	AmbientSound("GeneWorm/PortalSuckin",127);
	fadetobold(255,0,255,0.66,0.25);
	Delay(16);
	fadetobold(255,0,255,0.0,0.25);
	Delay(80);
	AmbientSound("GeneWorm/PortalSuckin",127);
	fadetobold(255,0,255,0.75,0.25);
	Delay(16);
	fadetobold(255,0,255,0.0,0.25);
	Delay(48);
	AmbientSound("GeneWorm/PortalSuckin",127);
	fadetobold(255,0,255,1.0,0.25);
	Delay(16);
	fadetobold(255,0,255,0.0,0.25);
	terminate;
}

script 2524 (void)
{
	thing_damage2(0,2000,"headcrab");
}

Script 2525 (void)
{
	Delay(64);
	fadetobold(0,255,0,1.0,0.25);
	Delay(16);
	fadetobold(0,255,0,0.0,0.25);
	terminate;
}

script 2526 (int onoff)
{
	Switch(onoff)
	{
		Case 1:
		While(GetActorProperty(0,APROP_ALPHA) > 0.10)
		{
			int alpha = GetActorProperty(0,APROP_ALPHA);
			SetActorProperty(0,APROP_ALPHA,alpha-0.05);
			delay(1);
		}
		break;
		Case 2:
		While(GetActorProperty(0,APROP_ALPHA) < 1.01)
		{
		    alpha = GetActorProperty(0,APROP_ALPHA);
			SetActorProperty(0,APROP_ALPHA,alpha+0.05);
			delay(1);
		}
		break;
	}
}

str gameClassesSTR[CLASSCOUNT] = {
	"DoomguyClass", "ChexClass", "CorvusClass", "WolfenClass", "HexenClass", "DukeClass", "MarathonClass", "QuakeClass", "RottClass", "BlakeClass",
	"CalebClass", "StrifeClass", "Doom64GuyClass", "EradClass", "C7Class", "RMRClass", "KatarnClass", "POGreedClass", "DisruptorClass", "WitchavenClass", 
	"HalfLifeClass", "SWClass", "CMClass", "JonClass", "RRClass", "BittermanClass", "Hexen2Class", "BondClass"
	};

Script 2527 (void)
{

	str ClassesAISTR[CLASSCOUNT] = {
	"Doom_AI", "Chex_AI", "Corvus_AI", "Blaskowicz_AI", "Parias_AI", "Duke_AI", "SecurityOfficer_AI", "Ranger_AI", "IPFreeley_AI", "Blake_AI",
	"Caleb_AI", "StrifeGuy_AI", "Doom64_AI", "Eleena_AI", "Corridor7_AI", "RMR_AI", "Katarn_AI", "POGreed_AI", "Jack_AI", "Grondoval_AI", 
	"Freeman_AI", "LoWang_AI", "Cybermage_AI", "Jon_AI", "Leonard_AI", "Bitterman_AI"
	};
	for(int i = 0; i < 26; i++)
	{
		if(CheckInventory(gameClassesSTR[i]) > 0)
		{
			int oldtid = ActivatorTid();
			int usertid = UniqueTid(0);
			int dummytid = UniqueTid(0);
		
			if(CheckInventory("HalfLifeOpposingForce"))
				SpawnSpotFacingForced("Shephard_AI", 0, usertid);
			else
				SpawnSpotFacingForced(ClassesAISTR[i], 0, usertid);
				
			SpawnSpotForced("TranslationDummy",0,dummytid,0);
			Thing_SetTranslation(dummytid, -1);
			SetActivator(dummytid, AAPTR_Default);
			Thing_SetTranslation(usertid, -1);
			Thing_ChangeTid(usertid, 0);
			break;
		}
	}
}

Script 2528 (void) // Jerec Death Effects need this script because of Zandronum being outdated
{
	SetActorProperty(0, APROP_RenderStyle, STYLE_STENCIL);
	SetActorProperty(0, APROP_StencilColor, 0xFFFF00);
}

Script 2529 (void) // Decorate with Jerec's grip is kinda broken so I think I want to see what an ACS script can do about it
{
	SetPlayerProperty(0, 1, PROP_TOTALLYFROZEN);
	Delay(20);
	TakeInventory("AlreadyGripped", 1);
	SetPlayerProperty(0, 0, PROP_TOTALLYFROZEN);
}

int ClassWeapons[CLASSCOUNT][9] = 
{
    {   // Doomguy
        "notapplicable",
		"notapplicable",
		"notapplicable",
		" Chainsaw ",
        "Super Shotgun",
        " Chaingun ",
        "Rocket Launcher",
        "Plasma Rifle",
        "B.F.G. 9000",
    },
    {   // Chexguy
		"notapplicable",
        "notapplicable",
		"notapplicable",
		"Super Bootspork",
        "Super Large Zorcher",
        "Rapid Zorcher",
        "Zorch Propulsor",
        "Phasing Zorcher",
        "LAZ Device",
    },
    {   // Corvus
		"notapplicable",
        "notapplicable",
		"notapplicable",
		"Gauntlets of the Necromancer",
        "Ethereal Crossbow",
        "Dragon Claw",
        "Phoenix Rod",
        "Hellstaff",
        "DSparilStaff",
    },

    {   // B.J.
		"notapplicable",
		"notapplicable",
		"notapplicable",
        "BJSuperKnife",
        "Machine Gun",
        "  Chaingun  ",
        " Rocket Launcher ",
        " Flamethrower ",
        "Spear of Destiny",
    },

    {   // Parias
		"notapplicable",
        "notapplicable",
		"notapplicable",
		"PortFlechette",
        "Timon's Axe",
        "Serpent Staff",
        "Hammer of Retribution",
        "Firestorm",
        "Wraithverge",
    },

    {   // Duke
		"notapplicable",
        "notapplicable",
		"notapplicable",
		"Pipebombs",
        "Explosive Shotgun",
        "Chaingun Cannon",
        "RPG",
        "Freezethrower",
        "Devastator",
    },

    {   // Security Officer
		"Alien Weapon",
        "Alien Weapon",
		"Alien Weapon",
		"KKV-7 SMG Flechette",
        "Fusion Pistol",
        "MA-75B Assault Rifle",
        "SPNKR-XP SSM Launcher",
        "TOZT-7 Napalm Unit",
        "ONI-71 Wave Motion Cannon",
    },
	
    {   // Ranger
		"Laser Cannon",
        "Laser Cannon",
		"Laser Cannon",
		"Mjolnir",
        "Grenade Launcher",
        "Nailgun",
        "  Rocket Launcher  ",
        "Super Nailgun",
        "Thunderbolt",
    },
    {   // I.P. Freely
		"Dark Staff",
        "Excalibat",
		"Split Missile",
		"Heatseeker",
        "Bazooka",
        "MP40",		
        " FireBomb ",
        "DrunkMissiles",
        "Flamewall",
    },
	{	// Blake Stone
		"notapplicable",
		"notapplicable",
		"notapplicable",
        "BlakeRefill",
        "Heavy Assault Rifle",
        "Rapid Assault Rifle",
        "Plasma Discharge Unit",
        "Dual Neutron Disruptor",
        "Anti-Plasma Cannon",
	},
	{	// Caleb
		"VoodooDoll",
		"VoodooDoll",
		"Spraycan",
        "Dynamite",
        "SawedOff",
        "Tommygun",
        "NapalmLauncher",
        "TeslaCannon",
        "LifeLeech"	,
	},
    {   // Strifeguy
		"notapplicable",
		"notapplicable",
		"notapplicable",
        "notapplicable",
        "Mini Missile Launcher",
        "Assault Gun",
        " Grenade Launcher ",
        "Flame Thrower",
        " Mauler ",
    },
    {   // Doom 64 Guy
		"notapplicable",
		"notapplicable",
		"notapplicable",
        "  Chainsaw  ",
        " Super Shotgun ",
        "   Chaingun   ",
        "   Rocket Launcher   ",
        " Plasma Rifle ",
        " B.F.G. 9000 ",
    },
    {   // Eleena
		"notapplicable",
		"notapplicable",
		"notapplicable",
        " Arachnicator ",
        "Pellet Bomb",
        "  Dart Cannon  ",
        "    Missile Launcher    ",
        "Napalm Charge",
		" Plasma Ball ",
    },
    {   // C7
		"notapplicable",
		"notapplicable",
		"notapplicable",
        "M24CAW",
        "AssaultShotgun",
        "AlienDualBlaster",
        "AlienPlasmaRifle",
        "AlienAssaultCannon",
        "AlienDisintegrator",
	},
    {   // RMR
		"notapplicable",
		"notapplicable",
		"notapplicable",
        "DirtShark",
        "ACR ADD-ON",
        "Cyclops Particle Accelerator",
        "RMR Grenade Launcher",
        "RMR Railgun",
        " RMR Plasma Cannon ",
	},	
    {   // Kyle Katarn
		"notapplicable",
		"notapplicable",
		"notapplicable",
        "Thermal Detonator",
        "Fusion Cutter",
        "Imperial Repeater",
        "Mortar Gun",
        "Concussion Rifle",
        "Assault Cannon",
    },	
	{	//Mooman
		"notapplicable",
		"notapplicable",
		"notapplicable",
		" Toxic Mutant Gun ",
		" Aldus Flamethrower ",
		" Fast Chaingun ",
		" Fast Rocket Launcher ",
		" Laser Cannon ",
		" Super Plasma Annihilator ",
	},	
	{	//Jack
		"notapplicable",
		"notapplicable",
		"notapplicable",
		" 18mm Auto ",
		" AM Blaster ",
		"Phase Repeater",
		" Lock-on Cannon ",
		" AM Cyclone ",
		" Disruptor Zodyac ",
	},
	//+Added
	{	// Grondoval
		"notapplicable",
		"notapplicable",
		"notapplicable",
		"notapplicable",
		"Pike Axe",
		"Ice Halberd",
		"Fire Mace",
		"Frozen two-hand sword",
		"Spellbook",
	},
	{	//Freebutt
		"HL Squeaks",
		"HL Crossbow",
		"HL Squeaks",
		"Hornetgun",
		"Assault Shotgun",
		"MP5",
		" RPG ",
		"Gauss Cannon",
		"E.G.O.N.",
	},	
    {   // Lo Wang
		"SWRipperHeart",
		"SWRipperHeart",
		"SWRipperHeart",
        "SWSticky",
        "SWRiotgun",
        "SWUzi",
        "SWMissileLauncher",
        " SWRailgun ",
        "SWGuardianHead",
	},	
    {   // Cybermage
		"notapplicable",
		"notapplicable",
		"notapplicable",
        "CMDarklightFoil",
        "CMBlastRifle",
        "CMSMG",
        "CMRocketGun",
        "CMHVBMG",
        "CMPlasmaGun",
	},	
    {   // Jon
		"Ring of RA",
		"Ring of RA",
		"Ring of RA",
        " Anubis Mine ",
        "PSFlamethrower",
        "PSM60",
        "PSCobraStaff",
        "Sacred Manacle",
        " Mummy Staff ",
	},	
    {   // Leonard
		" Dyn 'O' Mites ",
		" Hunting Rifle With Scope ",
		" Dyn 'O' Mites ",
        " RR Rip Saw ",
        " Scattered Gun ",
        " Ranch Rifle ",
        " Chicken Crossbow ",
        " Alien Bra Gun ",
        " Alien Arm Cannon ",
	},	
	{   // Bitterman
		"Q2IonRipper",
		"Q2GrenadeLauncher",
		"Q2ETFRifle",
        "Q2MachineGun",
        "Q2SuperShotgun",
        "Q2Chaingun",
        "Q2RocketLauncher",
        "Q2HyperBlaster",
        "Q2BFG10K",
    },
	{   // Demoness
		"notapplicable",
		"notapplicable",
		"notapplicable",
        "Hexen2IceMace",
        "Hexen2AcidRune",
        "Hexen2SpellBookBoneShard",
        "Hexen2FireRune",
        "Hexen2RavenStaff",
        "Hexen2TempestStaff",
    },
	{   // James Bond
		"Goldeneye_SniperRifle",
		"Goldeneye_SilencedD5K",
		"notapplicable",
        "Goldeneye_ThrowingKnives",
        "Goldeneye_AutoShotgun",
        "Goldeneye_AR33",
        "Goldeneye_RocketLauncher",
        "Goldeneye_RCP90",
        "Goldeneye_Moonraker",
    },
};

str SlotDummies[6] = {
	"GotWeapon0",
	"GotWeapon3",
	"GotWeapon4",
	"GotWeapon5",
	"GotWeapon6",
	"GotWeapon7",
};

str StoleDummies[9] = {
	"SamsaraUniquePickup3",
	"SamsaraUniquePickup1",
	"SamsaraUniquePickup2",
	"SamsaraSlotOneDrop",
	"SamsaraSlotThreeDrop",
	"SamsaraSlotFourDrop",
	"SamsaraSlotFiveDrop",
	"SamsaraSlotSixDrop",
	"SamsaraSlotSevenDrop",
};

Script "LightningGuardSteal" (int action) // Lightning Guard steal script. Trust me, it's better this way
{
	Switch(action)
	{
	Case 1: // check to steal
		SetActivator(0,AAPTR_TARGET);
		for(int i = 0; i < CLASSCOUNT; i++)
		{
			if(CheckInventory(gameClassesSTR[i]) > 0)
			{
				for(int j = 0; j < 10; j++)
				{
					if(CheckInventory(ClassWeapons[i][j]) == true)
					{
						SetResultValue(1);
						break;
					}
					else
					{
						SetResultValue(0);
					}
				}
			}
		}
		break;
	Case 2: //stealing mechanic
		SetActivator(0,AAPTR_TARGET);
		for(int k = 0; k < CLASSCOUNT; k++)
		{
			if(CheckInventory(gameClassesSTR[k]) > 0)
			{
				for(int l = 9; l > -1; l--)
				{
					//print(d:l);
					if(CheckInventory(ClassWeapons[k][l]) == true)
					{
						//print(s:gameClassesSTR[k],s:" ",s:ClassWeapons[k][l]);
						int result = (l+1);
						int dummy = (l-3);
						TakeInventory(SlotDummies[dummy],1);
						TakeInventory(ClassWeapons[k][l], 1);
						SetResultValue(result);
						break;
					}
					else
					{
						//print(s:"Failure");
						SetResultValue(0);
					}
				}
			}
		}
		break;
	Case 3: //death
		SpawnSpotForced(StoleDummies[CheckInventory("StoleWeapon")-1],0,0,0);
		break;
	}
}

script "IsThisSky" (Void)
{
    if (CheckActorCeilingTexture(0, "F_SKY1") || CheckActorCeilingTexture(0, "F_SKY2") || CheckActorCeilingTexture(0, "F_SKY") || CheckActorCeilingTexture(0, "F_SKY001"))
    {
        SetResultValue(1);
    }
    else
    {
         SetResultValue(0);
    }
}
script "spitz" (int value)
{
	printbold(d:value);
}
Script "LuckJump" (void)
{
	SetResultValue(random(0,256));
}
Script "Target_Angle" (void)
{
	int currentx = GetActorX(0);
	int currenty = GetActorY(0);
	int currentangle = GetActorAngle (0);
	SetActivator(0, AAPTR_Target);
	int vang = VectorAngle(GetActorX(0) - currentx, GetActorY(0) - currenty);
	int angle = ((vang - currentangle) % 1.0) / -182;
	//print(d:angle);
	SetResultValue(angle);
}
Script "WidowKickThrust" (void)
{
	SetActivator(0, AAPTR_Target);
	int monsterx = GetActorX(0);
	int monstery = GetActorY(0);
	int monsterz = GetActorZ(0);
	int angle = GetActorAngle(0);
	SetActivator(0, AAPTR_Target);
	int targetx = GetActorX(0);
	int targety = GetActorY(0);
	int targetz = GetActorZ(0);
	
	ThrustThingZ(0, 60, 0, 0);
	ThrustThing(angle*256/65536, 6, 0, 0);
}
Script "KingPinShield" (int duration)
{
	Delay(duration);
	SetActorState(0, "LowerShield", true);
}
Script "WarpLoop" (void) //for when I need to simplify specificy corpse code
{
	if(ClassifyActor(0) == ACTOR_WORLD)
		terminate;

	//int currentx = GetActorX(0);
	//int currenty = GetActorY(0);
	//int currentz = GetActorZ(0);
	int oldTID, target, masterTID, oldmasterTID;
	oldTID = ActivatorTID();
	oldmasterTID = ActivatorTID();
	target = UniqueTID();
	Thing_ChangeTID(0, target);
	SetActivator(0, AAPTR_Master);
	masterTID = UniqueTID();
	Thing_ChangeTID(0, masterTID);
	int masterx = GetActorVelX(0);
	int mastery = GetActorVelY(0);
	int masterz = GetActorVelZ(0);
	
	SetActivator(target);
	Thing_ChangeTID(target, oldTID);

	/*if(abs(masterx - currentx) > (8<<16) || abs(mastery - currenty) > (8<<16) || abs(masterz - currentz) > (8<<16))
	{
		Warp(masterTID, 0, 0, 0, 0, WARPF_INTERPOLATE|WARPF_NOCHECKPOSITION);
	}*/
	
	if(abs(masterx) > 0 || abs(mastery) > 0 || abs(masterz) > 0)
	{
		Warp(masterTID, 0, 0, 0, 0, WARPF_INTERPOLATE|WARPF_NOCHECKPOSITION);
	}
	
	Thing_ChangeTID(masterTID, oldmasterTID);
	Delay(4);
	restart;
}
Script "MonsterProjectilePitch" (int x, int y, int z)
{
	SetActivator(0, AAPTR_Target);
	int currentx = GetActorX(0);
	int currenty = GetActorY(0);
	int currentz = GetActorZ(0);
	int vector2original = sqrt(x*x + y*y);
	int vector2target = sqrt(currentx*currentx + currenty*currenty);
	SetResultValue(VectorAngle(vector2target - vector2original, currentz - z));
}
Script "Samsara_HLShockRoachPickupCondition" (void)
{
	int currentx = GetActorX(0);
	int currenty = GetActorY(0);
	int currentz = GetActorZ(0);
	SetActivatorToTarget(0);
	int targetx = GetActorX(0);
	int targety = GetActorY(0);
	int targetz = GetActorZ(0);
	int distancex = abs(currentx - targetx)>>16;
	int distancey = abs(currenty - targety)>>16;
	int distancez = abs(currentz - targetz)>>16;
	int distance = magnitudeTwo(distancex, distancey);	
	
	if(CheckInventory("IsSamsaraClass") && !CheckInventory("GotWeapon1") && distance < 32 && distancez <= 56)
		SetResultValue(1);
	else
		SetResultValue(0);
}
Script "Samsara_HLShockRoachPickup" (void)
{
	SetActivatorToTarget(0);
	for(int a = 0; a < 26; a++)
	{
		if(CheckInventory(gameClassesSTR[a]) > 0)
		{
			GiveInventory(ClassWeapons[a][3], 1);
			GiveInventory("GotWeapon1", 1);
			if(a == 20)
				ACS_ExecuteAlways(2685,0,11);
		}	
	}
}
Script "Samsara_Hexen2MissileDetector" (void)
{
	SetActivatorToTarget(0);
	SetResultValue(CheckInventory("Hexen2EnemyFireDetector"));
}
Script "Samsara_SetSpeed" (int input)
{
	SetActorProperty(0, APROP_Speed, input<<16);
	SetResultValue(1);
}
Script "Hexen2_PraevusTeleport" (int mode)
{
	int fire;
	int rotationspeed = 4550;
	if(mode == 0)
	{
		while(CheckInventory("Hexen2PraevusTeleportToken"))
		{
			if(GetActorProperty(0,APROP_ScaleX) >= 0.025)
			{
				SetActorProperty(0,APROP_ScaleX, GetActorProperty(0,APROP_ScaleX)-0.025);
				SetActorProperty(0,APROP_ScaleY, GetActorProperty(0,APROP_ScaleY)-0.025);
			}
			else
			{
				SetActorProperty(0,APROP_ScaleX, 0);
				SetActorProperty(0,APROP_ScaleY, 0);
			}
			if(GetActorProperty(0,APROP_ScaleX) >= 0.2 && GetActorProperty(0,APROP_ScaleX) <= 0.3 && fire == 0 && GetActorClass(0) != "Hexen2PraevusShield")
			{
				fire = 1;
				SpawnSpotForced("Hexen2PraevusTeleportFire",0,0,0);
			}
			Delay(1);
		}
	}
	else if(mode == 1)
	{
		while(CheckInventory("Hexen2PraevusTeleportOutToken"))
		{
			if(GetActorProperty(0,APROP_ScaleX) < 0.2  && fire == 0 && GetActorClass(0) != "Hexen2PraevusShield")
			{
				fire = 1;
				SpawnSpotForced("Hexen2PraevusTeleportFire",0,0,0);
			}
			if(GetActorProperty(0,APROP_ScaleX) < 1.0)
			{
				SetActorProperty(0,APROP_ScaleX, GetActorProperty(0,APROP_ScaleX)+0.025);
				SetActorProperty(0,APROP_ScaleY, GetActorProperty(0,APROP_ScaleY)+0.025);
			}
			Delay(1);
		}
	}
	else if(mode == 2)
	{
		while(CheckInventory("Hexen2PraevusTeleportRotationToken"))
		{
			SetActorAngle(0,GetActorAngle(0)+rotationspeed);
			Delay(1);
		}
	}
}

Script "Hexen2_PraevusShield" (void)
{
	int delaytimer;
	while(ClassifyActor(0) & ACTOR_ALIVE)
	{
		if(CheckInventory("Hexen2PraevusTeleportChildToken"))
		{
			if(!delaytimer)
			{
				delaytimer = 1;
				GiveInventory("Hexen2PraevusTeleportShieldInToken",1);
				GiveInventory("Hexen2PraevusTeleportToken",1);
				Delay(26);
				ACS_NamedExecuteAlways("Hexen2_PraevusTeleport",0,0,0,0);
			}
			if(CheckInventory("Hexen2PraevusTeleportChildOutToken"))
			{
				if(!CheckInventory("Hexen2PraevusTeleportOutToken"))
				{
					GiveInventory("Hexen2PraevusTeleportOutToken",1);
					TakeInventory("Hexen2PraevusTeleportToken",1);
					ACS_NamedExecuteAlways("Hexen2_PraevusTeleport",0,1,0,0);
				}
				if(GetActorProperty(0,APROP_ScaleX) >= 1.0)
				{
					delaytimer = 0;
					SetActorProperty(0,APROP_ScaleX, 1.0);
					SetActorProperty(0,APROP_ScaleY, 1.0);
					GiveInventory("Hexen2PraevusTeleportShieldOutToken",1);
					TakeInventory("Hexen2PraevusTeleportOutToken",1);
					TakeInventory("Hexen2PraevusTeleportChildToken",1);
					TakeInventory("Hexen2PraevusTeleportChildOutToken",1);
					TakeInventory("Hexen2PraevusTeleportToken",1);
					Delay(18);
				}
			}
		}
		Delay(1);
	}
}

Script "Hexen2_PraevusLifeTime" (void)
{
	int dmgtime;
	int oldhealth, spawnhealth;
	While(ClassifyActor(0) & ACTOR_ALIVE)
	{
		oldhealth = GetActorProperty(0,APROP_Health);
		spawnhealth = GetActorProperty(0,APROP_SpawnHealth);
		//PrintBold(s:"Damage Time: ",d:dmgtime,s:" Health: ",d:oldhealth,s:" Spawn Health: ",d:spawnhealth);
		if(oldhealth < FixedMul(spawnhealth,0.2) && dmgtime == 3)
		{
			dmgtime++;
			SetActorState(0,"Recharge",true);
		}
		else if(oldhealth < FixedMul(spawnhealth,0.4) && dmgtime == 2)
		{
			dmgtime++;
			SetActorState(0,"Recharge",true);
		}
		else if(oldhealth < FixedMul(spawnhealth,0.6) && dmgtime == 1)
		{
			dmgtime++;
			SetActorState(0,"Recharge",true);
		}
		else if(oldhealth < FixedMul(spawnhealth,0.8) && dmgtime == 0)
		{
			dmgtime++;
			SetActorState(0,"Recharge",true);
		}
		Delay(1);
		if(oldhealth > GetActorProperty(0,APROP_Health))
			PlaySound(0,GetActorProperty(0,APROP_PainSound),CHAN_VOICE,1.0,0,ATTN_NONE);
	}
}

Script "Hexen2_BossDeath" (int mode)
{
	if(mode == 0)
	{
		int count;
		int newtid = UniqueTid();
		SpawnForced("Hexen2BossDeathCircle1",GetActorX(0),GetActorY(0),GetActorZ(0)+25.0,newtid,GetActorAngle(0));
		While(count < 8)
		{
			SpawnForced("Hexen2BossDeathShaft",GetActorX(0),GetActorY(0),GetActorZ(0)+25.0,newtid,0);
			count++;
			Delay(7);
		}
		While(!(ClassifyActor(0) & ACTOR_WORLD))
		{
			//yes, the circle is supposed to spawn this, but we can only make this work by putting it here instead
			//SpawnForced("Hexen2BossDeathStar",GetActorX(0),GetActorY(0),GetActorZ(0)+25.0,newtid,random(0,65536));
			//SpawnProjectile(0,"Hexen2BossDeathStar",random(0,65536),30,0,0,newtid);
			if(CheckInventory("Hexen2PraevusFlashToken"))
			{
				fadetobold(255,255,255,1.0,0.25);
				Delay(16);
				Thing_Remove(newtid);
				fadetobold(255,255,255,0.0,0.25);
				terminate;
			}
			Delay(2);
		}
	}
	else if(mode == 1)
	{
		int beamdirection;
		int beammaxscale = random(0.5,1.5);
		int beamspeed = random(2,5);
		int anglea = random(0,65536);
		int angleb = random(3605,23655);
		if(random(0,10) > 5)
			beamdirection = 1;
		while(true)
		{
			if(GetActorProperty(0,APROP_ScaleX) < beammaxscale)
			{
				SetActorProperty(0,APROP_ScaleX,GetActorProperty(0,APROP_ScaleX)+0.6);
				SetActorProperty(0,APROP_ScaleY,GetActorProperty(0,APROP_ScaleY)+0.6);
			}
			else
			{
				SetActorProperty(0,APROP_ScaleX,beammaxscale);
				SetActorProperty(0,APROP_ScaleY,beammaxscale);
			}
			
			if(beamdirection)
				anglea += beamspeed*182;
			else
				anglea -= beamspeed*182;
			
			SetActorAngle(0,FixedMul(cos(anglea),angleb));
			SetActorPitch(0,FixedMul(sin(anglea),angleb));
			Delay(2);
		}
	}
	else if(mode == 2)
	{
		int stage;
		while(!(ClassifyActor(0) & ACTOR_WORLD))
		{
			GiveInventory("Hexen2BossDeathStarSpawner",1);
			if(stage == 0)
			{
				SetActorProperty(0,APROP_ScaleX,FixedMul(GetActorProperty(0,APROP_ScaleX),1.0275));
				SetActorProperty(0,APROP_ScaleY,FixedMul(GetActorProperty(0,APROP_ScaleY),1.0275));
				if(GetActorProperty(0,APROP_ScaleX) >= 2.5)
				{
					stage = 1;
					SetActorProperty(0,APROP_ScaleX,2.5);
					SetActorProperty(0,APROP_ScaleY,2.5);
				}
			}
			else if(stage == 1)
			{
				SetActorProperty(0,APROP_ScaleX,GetActorProperty(0,APROP_ScaleX)-0.1);
				SetActorProperty(0,APROP_ScaleY,GetActorProperty(0,APROP_ScaleY)-0.1);
				if(GetActorProperty(0,APROP_ScaleX) < 1.5 || random(0,10) < 1)
					stage = 2;
			}
			else if(stage == 2)
			{
				SetActorProperty(0,APROP_ScaleX,GetActorProperty(0,APROP_ScaleX)+(0.01*random(1,10)));
				SetActorProperty(0,APROP_ScaleY,GetActorProperty(0,APROP_ScaleY)+(0.01*random(1,10)));
				if(GetActorProperty(0,APROP_ScaleX) >= 2.5)
				{
					stage = 1;
					SetActorProperty(0,APROP_ScaleX,2.5);
					SetActorProperty(0,APROP_ScaleY,2.5);
				}
				else if(random(0,10) < 1)
				{
					stage = 1;
				}
			}
			Delay(2);
		}
	}
	else if(mode == 3)
	{
		int time; //implementing this to prevent the effect from going on too long
		While(!(ClassifyActor(0) & ACTOR_WORLD) && time < 105)
		{
			time++;
			SetActorVelocity(0,FixedMul(GetActorVelX(0),1.05),FixedMul(GetActorVelY(0),1.05),0,0,0);
			if(GetActorProperty(0,APROP_ScaleX) < 2.0)
			{
				SetActorProperty(0,APROP_ScaleX,FixedMul(GetActorProperty(0,APROP_ScaleX),1.08));
				SetActorProperty(0,APROP_ScaleY,FixedMul(GetActorProperty(0,APROP_ScaleY),1.08));
			}
			Delay(2);
		}		
		Thing_Remove(0);
		terminate;
	}
}